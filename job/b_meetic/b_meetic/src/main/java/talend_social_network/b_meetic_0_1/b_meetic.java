// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package talend_social_network.b_meetic_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Hao;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: b_meetic Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class b_meetic implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(path != null){
				
					this.setProperty("path", path.toString());
				
			}
			
			if(path_archive != null){
				
					this.setProperty("path_archive", path_archive.toString());
				
			}
			
			if(path_tmp != null){
				
					this.setProperty("path_tmp", path_tmp.toString());
				
			}
			
		}

public String path;
public String getPath(){
	return this.path;
}
public String path_archive;
public String getPath_archive(){
	return this.path_archive;
}
public String path_tmp;
public String getPath_tmp(){
	return this.path_tmp;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "b_meetic";
	private final String projectName = "TALEND_SOCIAL_NETWORK";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				b_meetic.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(b_meetic.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputFullRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputFullRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_1_ITFO_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_1_AI_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_2_ITFO_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_2_AI_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_3_ITFO_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_3_AI_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tIterateToFlow_1_AI_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tIterateToFlow_2_AI_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tIterateToFlow_3_AI_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


context.path_tmp = context.path+"/tmp";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileExist_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";

	
		int tos_count_tFileExist_1 = 0;
		
    	class BytesLimit65535_tFileExist_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExist_1().limitLog4jByte();

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	



java.io.File file_tFileExist_1 = new java.io.File(context.path_tmp);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.path_tmp);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tFileDelete_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileExist_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileList_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class OnSubjobOkStructtIterateToFlow_1 implements routines.system.IPersistableRow<OnSubjobOkStructtIterateToFlow_1> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_path = readString(dis);
					
					this.file_name = readString(dis);
					
					this.file_extension = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_path="+file_path);
		sb.append(",file_name="+file_name);
		sb.append(",file_extension="+file_extension);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnSubjobOkStructtIterateToFlow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tIterateToFlow_1_ITFO = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
    	class BytesLimit65535_tFileList_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_1().limitLog4jByte();
	
 
     
    
  String directory_tFileList_1 = context.path;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("*.html");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	NB_ITERATE_tIterateToFlow_1_ITFO++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tIterateToFlow_1_ITFO);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tIterateToFlow_1_ITFO begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_1_ITFO", false);
		start_Hash.put("tIterateToFlow_1_ITFO", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	
		int tos_count_tIterateToFlow_1_ITFO = 0;
		
    	class BytesLimit65535_tIterateToFlow_1_ITFO{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tIterateToFlow_1_ITFO().limitLog4jByte();

OnSubjobOkStructtIterateToFlow_1 struct_tIterateToFlow_1_ITFO = new OnSubjobOkStructtIterateToFlow_1();
struct_tIterateToFlow_1_ITFO.file_path  = ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));
struct_tIterateToFlow_1_ITFO.file_name  = ((String)globalMap.get("tFileList_1_CURRENT_FILE"));
struct_tIterateToFlow_1_ITFO.file_extension  = ((String)globalMap.get("tFileList_1_CURRENT_FILEEXTENSION"));

    if(globalMap.get("tIterateToFlow_1") != null){
    	java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = (java.util.List<OnSubjobOkStructtIterateToFlow_1>)globalMap.get("tIterateToFlow_1"); 
    	list_tIterateToFlow_1_ITFO.add(struct_tIterateToFlow_1_ITFO);
    }else{
    	java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
    	list_tIterateToFlow_1_ITFO.add(struct_tIterateToFlow_1_ITFO);
    	globalMap.put("tIterateToFlow_1",list_tIterateToFlow_1_ITFO);
    }
 



/**
 * [tIterateToFlow_1_ITFO begin ] stop
 */
	
	/**
	 * [tIterateToFlow_1_ITFO main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 


	tos_count_tIterateToFlow_1_ITFO++;

/**
 * [tIterateToFlow_1_ITFO main ] stop
 */
	
	/**
	 * [tIterateToFlow_1_ITFO end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 

ok_Hash.put("tIterateToFlow_1_ITFO", true);
end_Hash.put("tIterateToFlow_1_ITFO", System.currentTimeMillis());




/**
 * [tIterateToFlow_1_ITFO end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tIterateToFlow_1_ITFO);
						}				
					




	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk", 0, "ok");
								} 
							
							tIterateToFlow_1_AIProcess(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tIterateToFlow_1_ITFO finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 



/**
 * [tIterateToFlow_1_ITFO finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_path = readString(dis);
					
					this.file_name = readString(dis);
					
					this.file_extension = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_path="+file_path);
		sb.append(",file_name="+file_name);
		sb.append(",file_extension="+file_extension);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();




	
	/**
	 * [tFlowToIterate_3 begin ] start
	 */

				
			int NB_ITERATE_tFileInputFullRow_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_3", false);
		start_Hash.put("tFlowToIterate_3", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFlowToIterate_3 = 0;
		
    	class BytesLimit65535_tFlowToIterate_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFlowToIterate_3().limitLog4jByte();

int nb_line_tFlowToIterate_3 = 0;
int counter_tFlowToIterate_3 = 0;

 



/**
 * [tFlowToIterate_3 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";

	
		int tos_count_tHashInput_3 = 0;
		
    	class BytesLimit65535_tHashInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_3().limitLog4jByte();


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_b_meetic_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row1Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row8.file_path = next_tHashInput_3.file_path;
	row8.file_name = next_tHashInput_3.file_name;
	row8.file_extension = next_tHashInput_3.file_extension;
 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */

	
	/**
	 * [tFlowToIterate_3 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		


    	            
            globalMap.put("row8.file_path", row8.file_path);
    	            
            globalMap.put("row8.file_name", row8.file_name);
    	            
            globalMap.put("row8.file_extension", row8.file_extension);
    	
 
	   nb_line_tFlowToIterate_3++;  
       counter_tFlowToIterate_3++;
       globalMap.put("tFlowToIterate_3_CURRENT_ITERATION", counter_tFlowToIterate_3);
 


	tos_count_tFlowToIterate_3++;

/**
 * [tFlowToIterate_3 main ] stop
 */
	NB_ITERATE_tFileInputFullRow_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tFileInputFullRow_2);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.path_tmp+"/"+((String)globalMap.get("row8.file_name")))).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */" "/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFileInputFullRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputFullRow_2", false);
		start_Hash.put("tFileInputFullRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputFullRow_2";

	
		int tos_count_tFileInputFullRow_2 = 0;
		
    	class BytesLimit65535_tFileInputFullRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputFullRow_2().limitLog4jByte();

	org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_2 = null;

	

	try{//}
		fid_tFileInputFullRow_2 =new org.talend.fileprocess.FileInputDelimited(((String)globalMap.get("row8.file_path")),"UTF-8","","\n",true,0,0,-1,-1,false);
		while (fid_tFileInputFullRow_2.nextRecord()) {//}
			row9 = null;						
	boolean whetherReject_tFileInputFullRow_2 = false;
	row9 = new row9Struct();
		row9.line = fid_tFileInputFullRow_2.get(0);

 



/**
 * [tFileInputFullRow_2 begin ] stop
 */
	
	/**
	 * [tFileInputFullRow_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_2";

	

 


	tos_count_tFileInputFullRow_2++;

/**
 * [tFileInputFullRow_2 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row9.line != null) {
                        sb_tFileOutputDelimited_2.append(
                            row9.line
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */



	
	/**
	 * [tFileInputFullRow_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_2";

	

	


            }
           	}finally{
           		if(fid_tFileInputFullRow_2!=null){
            		fid_tFileInputFullRow_2.close();
            	}
            }
            globalMap.put("tFileInputFullRow_2_NB_LINE", fid_tFileInputFullRow_2.getRowNumber());
 

ok_Hash.put("tFileInputFullRow_2", true);
end_Hash.put("tFileInputFullRow_2", System.currentTimeMillis());




/**
 * [tFileInputFullRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tFileInputFullRow_2);
						}				
					







	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	
    

		
			nb_line_tHashInput_3++;
		}	
    		
    		mf_tHashInput_3.clearCache("tHashFile_b_meetic_" + pid +"_tHashOutput_1");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_b_meetic_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tFlowToIterate_3 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";

	

globalMap.put("tFlowToIterate_3_NB_LINE",nb_line_tFlowToIterate_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFlowToIterate_3", true);
end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());




/**
 * [tFlowToIterate_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFileList_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_3 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";

	

 



/**
 * [tFlowToIterate_3 finally ] stop
 */

	
	/**
	 * [tFileInputFullRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_2";

	

 



/**
 * [tFileInputFullRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class OnSubjobOkStructtIterateToFlow_2 implements routines.system.IPersistableRow<OnSubjobOkStructtIterateToFlow_2> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_path = readString(dis);
					
					this.file_name = readString(dis);
					
					this.file_extension = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_path="+file_path);
		sb.append(",file_name="+file_name);
		sb.append(",file_extension="+file_extension);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnSubjobOkStructtIterateToFlow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tIterateToFlow_2_ITFO = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
    	class BytesLimit65535_tFileList_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_2().limitLog4jByte();
	
 
     
    
  String directory_tFileList_2 = context.path_tmp;
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_2.add("*.html");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2);
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = true;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
     
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	NB_ITERATE_tIterateToFlow_2_ITFO++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tIterateToFlow_2_ITFO);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tIterateToFlow_2_ITFO begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_2_ITFO", false);
		start_Hash.put("tIterateToFlow_2_ITFO", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_2";
	
	currentComponent="tIterateToFlow_2_ITFO";

	
		int tos_count_tIterateToFlow_2_ITFO = 0;
		
    	class BytesLimit65535_tIterateToFlow_2_ITFO{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tIterateToFlow_2_ITFO().limitLog4jByte();

OnSubjobOkStructtIterateToFlow_2 struct_tIterateToFlow_2_ITFO = new OnSubjobOkStructtIterateToFlow_2();
struct_tIterateToFlow_2_ITFO.file_path  = ((String)globalMap.get("tFileList_2_CURRENT_FILEPATH"));
struct_tIterateToFlow_2_ITFO.file_name  = ((String)globalMap.get("tFileList_2_CURRENT_FILE"));
struct_tIterateToFlow_2_ITFO.file_extension  = ((String)globalMap.get("tFileList_2_CURRENT_FILEEXTENSION"));

    if(globalMap.get("tIterateToFlow_2") != null){
    	java.util.List<OnSubjobOkStructtIterateToFlow_2> list_tIterateToFlow_2_ITFO = (java.util.List<OnSubjobOkStructtIterateToFlow_2>)globalMap.get("tIterateToFlow_2"); 
    	list_tIterateToFlow_2_ITFO.add(struct_tIterateToFlow_2_ITFO);
    }else{
    	java.util.List<OnSubjobOkStructtIterateToFlow_2> list_tIterateToFlow_2_ITFO = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_2>();
    	list_tIterateToFlow_2_ITFO.add(struct_tIterateToFlow_2_ITFO);
    	globalMap.put("tIterateToFlow_2",list_tIterateToFlow_2_ITFO);
    }
 



/**
 * [tIterateToFlow_2_ITFO begin ] stop
 */
	
	/**
	 * [tIterateToFlow_2_ITFO main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_2";
	
	currentComponent="tIterateToFlow_2_ITFO";

	

 


	tos_count_tIterateToFlow_2_ITFO++;

/**
 * [tIterateToFlow_2_ITFO main ] stop
 */
	
	/**
	 * [tIterateToFlow_2_ITFO end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_2";
	
	currentComponent="tIterateToFlow_2_ITFO";

	

 

ok_Hash.put("tIterateToFlow_2_ITFO", true);
end_Hash.put("tIterateToFlow_2_ITFO", System.currentTimeMillis());




/**
 * [tIterateToFlow_2_ITFO end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tIterateToFlow_2_ITFO);
						}				
					




	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk", 0, "ok");
								} 
							
							tIterateToFlow_2_AIProcess(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tIterateToFlow_2_ITFO finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_2";
	
	currentComponent="tIterateToFlow_2_ITFO";

	

 



/**
 * [tIterateToFlow_2_ITFO finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
					this.file_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
		sb.append(",file_name="+file_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_path = readString(dis);
					
					this.file_name = readString(dis);
					
					this.file_extension = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_path="+file_path);
		sb.append(",file_name="+file_name);
		sb.append(",file_extension="+file_extension);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
out1Struct out1 = new out1Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputFullRow_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFlowToIterate_1 = 0;
		
    	class BytesLimit65535_tFlowToIterate_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFlowToIterate_1().limitLog4jByte();

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";

	
		int tos_count_tHashInput_1 = 0;
		
    	class BytesLimit65535_tHashInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_1().limitLog4jByte();


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_b_meetic_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row7Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row7Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row2.file_path = next_tHashInput_1.file_path;
	row2.file_name = next_tHashInput_1.file_name;
	row2.file_extension = next_tHashInput_1.file_extension;
 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


    	            
            globalMap.put("row2.file_path", row2.file_path);
    	            
            globalMap.put("row2.file_name", row2.file_name);
    	            
            globalMap.put("row2.file_extension", row2.file_extension);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	NB_ITERATE_tFileInputFullRow_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileInputFullRow_1);
					//Thread.sleep(1000);
				}				
			




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_2 = 0;
		
    	class BytesLimit65535_tHashOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashOutput_2().limitLog4jByte();



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_b_meetic_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;
 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputFullRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputFullRow_1", false);
		start_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputFullRow_1";

	
		int tos_count_tFileInputFullRow_1 = 0;
		
    	class BytesLimit65535_tFileInputFullRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputFullRow_1().limitLog4jByte();

	org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_1 = null;

	

	try{//}
		fid_tFileInputFullRow_1 =new org.talend.fileprocess.FileInputDelimited(((String)globalMap.get("row2.file_path")),"UTF-8","","\n",true,0,0,-1,-1,false);
		while (fid_tFileInputFullRow_1.nextRecord()) {//}
			row3 = null;						
	boolean whetherReject_tFileInputFullRow_1 = false;
	row3 = new row3Struct();
		row3.line = fid_tFileInputFullRow_1.get(0);

 



/**
 * [tFileInputFullRow_1 begin ] stop
 */
	
	/**
	 * [tFileInputFullRow_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

 


	tos_count_tFileInputFullRow_1++;

/**
 * [tFileInputFullRow_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

    //Code generate according to input schema and output schema

String ligne = row3.line;
if(ligne==null || ligne.equals(""))
{
	continue;
}
else
{
	row4.line = ligne;
}

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.line = row4.line ;
out1_tmp.file_name = ((String)globalMap.get("row2.file_path"));
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		



    
		out1Struct oneRow_tHashOutput_2 = new out1Struct();
				
					oneRow_tHashOutput_2.line = out1.line;
					oneRow_tHashOutput_2.file_name = out1.file_name;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;
 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */

} // End of branch "out1"










	
	/**
	 * [tFileInputFullRow_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

	


            }
           	}finally{
           		if(fid_tFileInputFullRow_1!=null){
            		fid_tFileInputFullRow_1.close();
            	}
            }
            globalMap.put("tFileInputFullRow_1_NB_LINE", fid_tFileInputFullRow_1.getRowNumber());
 

ok_Hash.put("tFileInputFullRow_1", true);
end_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());




/**
 * [tFileInputFullRow_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileInputFullRow_1);
						}				
					







	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	
    

		
			nb_line_tHashInput_1++;
		}	
    		
    		mf_tHashInput_1.clearCache("tHashFile_b_meetic_" + pid +"_tHashOutput_4");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_b_meetic_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tFileInputFullRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

 



/**
 * [tFileInputFullRow_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer age;

				public Integer getAge () {
					return this.age;
				}
				
			    public Integer birthday;

				public Integer getBirthday () {
					return this.birthday;
				}
				
			    public Integer height;

				public Integer getHeight () {
					return this.height;
				}
				
			    public Integer weight;

				public Integer getWeight () {
					return this.weight;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String photo;

				public String getPhoto () {
					return this.photo;
				}
				
			    public String imperfection;

				public String getImperfection () {
					return this.imperfection;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String nationality;

				public String getNationality () {
					return this.nationality;
				}
				
			    public String relation_type;

				public String getRelation_type () {
					return this.relation_type;
				}
				
			    public String temper;

				public String getTemper () {
					return this.temper;
				}
				
			    public String romantic;

				public String getRomantic () {
					return this.romantic;
				}
				
			    public String marriage;

				public String getMarriage () {
					return this.marriage;
				}
				
			    public String children_wish;

				public String getChildren_wish () {
					return this.children_wish;
				}
				
			    public String body_shape;

				public String getBody_shape () {
					return this.body_shape;
				}
				
			    public String attraction;

				public String getAttraction () {
					return this.attraction;
				}
				
			    public String living_style;

				public String getLiving_style () {
					return this.living_style;
				}
				
			    public String look;

				public String getLook () {
					return this.look;
				}
				
			    public String ethnicity;

				public String getEthnicity () {
					return this.ethnicity;
				}
				
			    public String eyes;

				public String getEyes () {
					return this.eyes;
				}
				
			    public String hair_color;

				public String getHair_color () {
					return this.hair_color;
				}
				
			    public String hair_style;

				public String getHair_style () {
					return this.hair_style;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public Boolean has_children;

				public Boolean getHas_children () {
					return this.has_children;
				}
				
			    public String live_with;

				public String getLive_with () {
					return this.live_with;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String religion;

				public String getReligion () {
					return this.religion;
				}
				
			    public String religion_behaviour;

				public String getReligion_behaviour () {
					return this.religion_behaviour;
				}
				
			    public String food_habit;

				public String getFood_habit () {
					return this.food_habit;
				}
				
			    public String pet;

				public String getPet () {
					return this.pet;
				}
				
			    public String language;

				public String getLanguage () {
					return this.language;
				}
				
			    public String studies;

				public String getStudies () {
					return this.studies;
				}
				
			    public String income;

				public String getIncome () {
					return this.income;
				}
				
			    public Integer search_age_from;

				public Integer getSearch_age_from () {
					return this.search_age_from;
				}
				
			    public Integer search_age_to;

				public Integer getSearch_age_to () {
					return this.search_age_to;
				}
				
			    public String search_body_shape;

				public String getSearch_body_shape () {
					return this.search_body_shape;
				}
				
			    public String search_marital_status;

				public String getSearch_marital_status () {
					return this.search_marital_status;
				}
				
			    public String search_children_wish;

				public String getSearch_children_wish () {
					return this.search_children_wish;
				}
				
			    public String search_smoker;

				public String getSearch_smoker () {
					return this.search_smoker;
				}
				
			    public Integer search_height_from;

				public Integer getSearch_height_from () {
					return this.search_height_from;
				}
				
			    public Integer search_height_to;

				public Integer getSearch_height_to () {
					return this.search_height_to;
				}
				
			    public Integer search_weight_from;

				public Integer getSearch_weight_from () {
					return this.search_weight_from;
				}
				
			    public Integer search_weight_to;

				public Integer getSearch_weight_to () {
					return this.search_weight_to;
				}
				
			    public String search_look;

				public String getSearch_look () {
					return this.search_look;
				}
				
			    public String search_has_children;

				public String getSearch_has_children () {
					return this.search_has_children;
				}
				
			    public String search_attraction;

				public String getSearch_attraction () {
					return this.search_attraction;
				}
				
			    public String search_hair_style;

				public String getSearch_hair_style () {
					return this.search_hair_style;
				}
				
			    public String search_hair_color;

				public String getSearch_hair_color () {
					return this.search_hair_color;
				}
				
			    public String search_eyes;

				public String getSearch_eyes () {
					return this.search_eyes;
				}
				
			    public String search_living_style;

				public String getSearch_living_style () {
					return this.search_living_style;
				}
				
			    public String search_nationality;

				public String getSearch_nationality () {
					return this.search_nationality;
				}
				
			    public String search_ethnicity;

				public String getSearch_ethnicity () {
					return this.search_ethnicity;
				}
				
			    public String search_live_with;

				public String getSearch_live_with () {
					return this.search_live_with;
				}
				
			    public String search_pet;

				public String getSearch_pet () {
					return this.search_pet;
				}
				
			    public String search_studies;

				public String getSearch_studies () {
					return this.search_studies;
				}
				
			    public String search_language;

				public String getSearch_language () {
					return this.search_language;
				}
				
			    public String search_job;

				public String getSearch_job () {
					return this.search_job;
				}
				
			    public String search_income;

				public String getSearch_income () {
					return this.search_income;
				}
				
			    public String search_hobbies;

				public String getSearch_hobbies () {
					return this.search_hobbies;
				}
				
			    public String search_leisure;

				public String getSearch_leisure () {
					return this.search_leisure;
				}
				
			    public String search_music;

				public String getSearch_music () {
					return this.search_music;
				}
				
			    public String search_movie;

				public String getSearch_movie () {
					return this.search_movie;
				}
				
			    public String search_sports;

				public String getSearch_sports () {
					return this.search_sports;
				}
				
			    public String search_temper;

				public String getSearch_temper () {
					return this.search_temper;
				}
				
			    public String search_food_habit;

				public String getSearch_food_habit () {
					return this.search_food_habit;
				}
				
			    public String search_romantic;

				public String getSearch_romantic () {
					return this.search_romantic;
				}
				
			    public String search_marriage;

				public String getSearch_marriage () {
					return this.search_marriage;
				}
				
			    public String search_religion_behaviour;

				public String getSearch_religion_behaviour () {
					return this.search_religion_behaviour;
				}
				
			    public String search_religion;

				public String getSearch_religion () {
					return this.search_religion;
				}
				
			    public String music;

				public String getMusic () {
					return this.music;
				}
				
			    public String leisure;

				public String getLeisure () {
					return this.leisure;
				}
				
			    public String hobbies;

				public String getHobbies () {
					return this.hobbies;
				}
				
			    public String movie;

				public String getMovie () {
					return this.movie;
				}
				
			    public String sports;

				public String getSports () {
					return this.sports;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.url = readString(dis);
					
					this.name = readString(dis);
					
						this.age = readInteger(dis);
					
						this.birthday = readInteger(dis);
					
						this.height = readInteger(dis);
					
						this.weight = readInteger(dis);
					
					this.city = readString(dis);
					
					this.region = readString(dis);
					
					this.photo = readString(dis);
					
					this.imperfection = readString(dis);
					
					this.description = readString(dis);
					
					this.nationality = readString(dis);
					
					this.relation_type = readString(dis);
					
					this.temper = readString(dis);
					
					this.romantic = readString(dis);
					
					this.marriage = readString(dis);
					
					this.children_wish = readString(dis);
					
					this.body_shape = readString(dis);
					
					this.attraction = readString(dis);
					
					this.living_style = readString(dis);
					
					this.look = readString(dis);
					
					this.ethnicity = readString(dis);
					
					this.eyes = readString(dis);
					
					this.hair_color = readString(dis);
					
					this.hair_style = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.smoker = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_children = null;
           				} else {
           			    	this.has_children = dis.readBoolean();
           				}
					
					this.live_with = readString(dis);
					
					this.job = readString(dis);
					
					this.religion = readString(dis);
					
					this.religion_behaviour = readString(dis);
					
					this.food_habit = readString(dis);
					
					this.pet = readString(dis);
					
					this.language = readString(dis);
					
					this.studies = readString(dis);
					
					this.income = readString(dis);
					
						this.search_age_from = readInteger(dis);
					
						this.search_age_to = readInteger(dis);
					
					this.search_body_shape = readString(dis);
					
					this.search_marital_status = readString(dis);
					
					this.search_children_wish = readString(dis);
					
					this.search_smoker = readString(dis);
					
						this.search_height_from = readInteger(dis);
					
						this.search_height_to = readInteger(dis);
					
						this.search_weight_from = readInteger(dis);
					
						this.search_weight_to = readInteger(dis);
					
					this.search_look = readString(dis);
					
					this.search_has_children = readString(dis);
					
					this.search_attraction = readString(dis);
					
					this.search_hair_style = readString(dis);
					
					this.search_hair_color = readString(dis);
					
					this.search_eyes = readString(dis);
					
					this.search_living_style = readString(dis);
					
					this.search_nationality = readString(dis);
					
					this.search_ethnicity = readString(dis);
					
					this.search_live_with = readString(dis);
					
					this.search_pet = readString(dis);
					
					this.search_studies = readString(dis);
					
					this.search_language = readString(dis);
					
					this.search_job = readString(dis);
					
					this.search_income = readString(dis);
					
					this.search_hobbies = readString(dis);
					
					this.search_leisure = readString(dis);
					
					this.search_music = readString(dis);
					
					this.search_movie = readString(dis);
					
					this.search_sports = readString(dis);
					
					this.search_temper = readString(dis);
					
					this.search_food_habit = readString(dis);
					
					this.search_romantic = readString(dis);
					
					this.search_marriage = readString(dis);
					
					this.search_religion_behaviour = readString(dis);
					
					this.search_religion = readString(dis);
					
					this.music = readString(dis);
					
					this.leisure = readString(dis);
					
					this.hobbies = readString(dis);
					
					this.movie = readString(dis);
					
					this.sports = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.age,dos);
					
					// Integer
				
						writeInteger(this.birthday,dos);
					
					// Integer
				
						writeInteger(this.height,dos);
					
					// Integer
				
						writeInteger(this.weight,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.photo,dos);
					
					// String
				
						writeString(this.imperfection,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.nationality,dos);
					
					// String
				
						writeString(this.relation_type,dos);
					
					// String
				
						writeString(this.temper,dos);
					
					// String
				
						writeString(this.romantic,dos);
					
					// String
				
						writeString(this.marriage,dos);
					
					// String
				
						writeString(this.children_wish,dos);
					
					// String
				
						writeString(this.body_shape,dos);
					
					// String
				
						writeString(this.attraction,dos);
					
					// String
				
						writeString(this.living_style,dos);
					
					// String
				
						writeString(this.look,dos);
					
					// String
				
						writeString(this.ethnicity,dos);
					
					// String
				
						writeString(this.eyes,dos);
					
					// String
				
						writeString(this.hair_color,dos);
					
					// String
				
						writeString(this.hair_style,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// Boolean
				
						if(this.has_children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_children);
		            	}
					
					// String
				
						writeString(this.live_with,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.religion,dos);
					
					// String
				
						writeString(this.religion_behaviour,dos);
					
					// String
				
						writeString(this.food_habit,dos);
					
					// String
				
						writeString(this.pet,dos);
					
					// String
				
						writeString(this.language,dos);
					
					// String
				
						writeString(this.studies,dos);
					
					// String
				
						writeString(this.income,dos);
					
					// Integer
				
						writeInteger(this.search_age_from,dos);
					
					// Integer
				
						writeInteger(this.search_age_to,dos);
					
					// String
				
						writeString(this.search_body_shape,dos);
					
					// String
				
						writeString(this.search_marital_status,dos);
					
					// String
				
						writeString(this.search_children_wish,dos);
					
					// String
				
						writeString(this.search_smoker,dos);
					
					// Integer
				
						writeInteger(this.search_height_from,dos);
					
					// Integer
				
						writeInteger(this.search_height_to,dos);
					
					// Integer
				
						writeInteger(this.search_weight_from,dos);
					
					// Integer
				
						writeInteger(this.search_weight_to,dos);
					
					// String
				
						writeString(this.search_look,dos);
					
					// String
				
						writeString(this.search_has_children,dos);
					
					// String
				
						writeString(this.search_attraction,dos);
					
					// String
				
						writeString(this.search_hair_style,dos);
					
					// String
				
						writeString(this.search_hair_color,dos);
					
					// String
				
						writeString(this.search_eyes,dos);
					
					// String
				
						writeString(this.search_living_style,dos);
					
					// String
				
						writeString(this.search_nationality,dos);
					
					// String
				
						writeString(this.search_ethnicity,dos);
					
					// String
				
						writeString(this.search_live_with,dos);
					
					// String
				
						writeString(this.search_pet,dos);
					
					// String
				
						writeString(this.search_studies,dos);
					
					// String
				
						writeString(this.search_language,dos);
					
					// String
				
						writeString(this.search_job,dos);
					
					// String
				
						writeString(this.search_income,dos);
					
					// String
				
						writeString(this.search_hobbies,dos);
					
					// String
				
						writeString(this.search_leisure,dos);
					
					// String
				
						writeString(this.search_music,dos);
					
					// String
				
						writeString(this.search_movie,dos);
					
					// String
				
						writeString(this.search_sports,dos);
					
					// String
				
						writeString(this.search_temper,dos);
					
					// String
				
						writeString(this.search_food_habit,dos);
					
					// String
				
						writeString(this.search_romantic,dos);
					
					// String
				
						writeString(this.search_marriage,dos);
					
					// String
				
						writeString(this.search_religion_behaviour,dos);
					
					// String
				
						writeString(this.search_religion,dos);
					
					// String
				
						writeString(this.music,dos);
					
					// String
				
						writeString(this.leisure,dos);
					
					// String
				
						writeString(this.hobbies,dos);
					
					// String
				
						writeString(this.movie,dos);
					
					// String
				
						writeString(this.sports,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",url="+url);
		sb.append(",name="+name);
		sb.append(",age="+String.valueOf(age));
		sb.append(",birthday="+String.valueOf(birthday));
		sb.append(",height="+String.valueOf(height));
		sb.append(",weight="+String.valueOf(weight));
		sb.append(",city="+city);
		sb.append(",region="+region);
		sb.append(",photo="+photo);
		sb.append(",imperfection="+imperfection);
		sb.append(",description="+description);
		sb.append(",nationality="+nationality);
		sb.append(",relation_type="+relation_type);
		sb.append(",temper="+temper);
		sb.append(",romantic="+romantic);
		sb.append(",marriage="+marriage);
		sb.append(",children_wish="+children_wish);
		sb.append(",body_shape="+body_shape);
		sb.append(",attraction="+attraction);
		sb.append(",living_style="+living_style);
		sb.append(",look="+look);
		sb.append(",ethnicity="+ethnicity);
		sb.append(",eyes="+eyes);
		sb.append(",hair_color="+hair_color);
		sb.append(",hair_style="+hair_style);
		sb.append(",marital_status="+marital_status);
		sb.append(",smoker="+smoker);
		sb.append(",has_children="+String.valueOf(has_children));
		sb.append(",live_with="+live_with);
		sb.append(",job="+job);
		sb.append(",religion="+religion);
		sb.append(",religion_behaviour="+religion_behaviour);
		sb.append(",food_habit="+food_habit);
		sb.append(",pet="+pet);
		sb.append(",language="+language);
		sb.append(",studies="+studies);
		sb.append(",income="+income);
		sb.append(",search_age_from="+String.valueOf(search_age_from));
		sb.append(",search_age_to="+String.valueOf(search_age_to));
		sb.append(",search_body_shape="+search_body_shape);
		sb.append(",search_marital_status="+search_marital_status);
		sb.append(",search_children_wish="+search_children_wish);
		sb.append(",search_smoker="+search_smoker);
		sb.append(",search_height_from="+String.valueOf(search_height_from));
		sb.append(",search_height_to="+String.valueOf(search_height_to));
		sb.append(",search_weight_from="+String.valueOf(search_weight_from));
		sb.append(",search_weight_to="+String.valueOf(search_weight_to));
		sb.append(",search_look="+search_look);
		sb.append(",search_has_children="+search_has_children);
		sb.append(",search_attraction="+search_attraction);
		sb.append(",search_hair_style="+search_hair_style);
		sb.append(",search_hair_color="+search_hair_color);
		sb.append(",search_eyes="+search_eyes);
		sb.append(",search_living_style="+search_living_style);
		sb.append(",search_nationality="+search_nationality);
		sb.append(",search_ethnicity="+search_ethnicity);
		sb.append(",search_live_with="+search_live_with);
		sb.append(",search_pet="+search_pet);
		sb.append(",search_studies="+search_studies);
		sb.append(",search_language="+search_language);
		sb.append(",search_job="+search_job);
		sb.append(",search_income="+search_income);
		sb.append(",search_hobbies="+search_hobbies);
		sb.append(",search_leisure="+search_leisure);
		sb.append(",search_music="+search_music);
		sb.append(",search_movie="+search_movie);
		sb.append(",search_sports="+search_sports);
		sb.append(",search_temper="+search_temper);
		sb.append(",search_food_habit="+search_food_habit);
		sb.append(",search_romantic="+search_romantic);
		sb.append(",search_marriage="+search_marriage);
		sb.append(",search_religion_behaviour="+search_religion_behaviour);
		sb.append(",search_religion="+search_religion);
		sb.append(",music="+music);
		sb.append(",leisure="+leisure);
		sb.append(",hobbies="+hobbies);
		sb.append(",movie="+movie);
		sb.append(",sports="+sports);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer age;

				public Integer getAge () {
					return this.age;
				}
				
			    public Integer birthday;

				public Integer getBirthday () {
					return this.birthday;
				}
				
			    public Integer height;

				public Integer getHeight () {
					return this.height;
				}
				
			    public Integer weight;

				public Integer getWeight () {
					return this.weight;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String photo;

				public String getPhoto () {
					return this.photo;
				}
				
			    public String imperfection;

				public String getImperfection () {
					return this.imperfection;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String nationality;

				public String getNationality () {
					return this.nationality;
				}
				
			    public String relation_type;

				public String getRelation_type () {
					return this.relation_type;
				}
				
			    public String temper;

				public String getTemper () {
					return this.temper;
				}
				
			    public String romantic;

				public String getRomantic () {
					return this.romantic;
				}
				
			    public String marriage;

				public String getMarriage () {
					return this.marriage;
				}
				
			    public String children_wish;

				public String getChildren_wish () {
					return this.children_wish;
				}
				
			    public String body_shape;

				public String getBody_shape () {
					return this.body_shape;
				}
				
			    public String attraction;

				public String getAttraction () {
					return this.attraction;
				}
				
			    public String living_style;

				public String getLiving_style () {
					return this.living_style;
				}
				
			    public String look;

				public String getLook () {
					return this.look;
				}
				
			    public String ethnicity;

				public String getEthnicity () {
					return this.ethnicity;
				}
				
			    public String eyes;

				public String getEyes () {
					return this.eyes;
				}
				
			    public String hair_color;

				public String getHair_color () {
					return this.hair_color;
				}
				
			    public String hair_style;

				public String getHair_style () {
					return this.hair_style;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public Boolean has_children;

				public Boolean getHas_children () {
					return this.has_children;
				}
				
			    public String live_with;

				public String getLive_with () {
					return this.live_with;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String religion;

				public String getReligion () {
					return this.religion;
				}
				
			    public String religion_behaviour;

				public String getReligion_behaviour () {
					return this.religion_behaviour;
				}
				
			    public String food_habit;

				public String getFood_habit () {
					return this.food_habit;
				}
				
			    public String pet;

				public String getPet () {
					return this.pet;
				}
				
			    public String language;

				public String getLanguage () {
					return this.language;
				}
				
			    public String studies;

				public String getStudies () {
					return this.studies;
				}
				
			    public String income;

				public String getIncome () {
					return this.income;
				}
				
			    public Integer search_age_from;

				public Integer getSearch_age_from () {
					return this.search_age_from;
				}
				
			    public Integer search_age_to;

				public Integer getSearch_age_to () {
					return this.search_age_to;
				}
				
			    public String search_body_shape;

				public String getSearch_body_shape () {
					return this.search_body_shape;
				}
				
			    public String search_marital_status;

				public String getSearch_marital_status () {
					return this.search_marital_status;
				}
				
			    public String search_children_wish;

				public String getSearch_children_wish () {
					return this.search_children_wish;
				}
				
			    public String search_smoker;

				public String getSearch_smoker () {
					return this.search_smoker;
				}
				
			    public Integer search_height_from;

				public Integer getSearch_height_from () {
					return this.search_height_from;
				}
				
			    public Integer search_height_to;

				public Integer getSearch_height_to () {
					return this.search_height_to;
				}
				
			    public Integer search_weight_from;

				public Integer getSearch_weight_from () {
					return this.search_weight_from;
				}
				
			    public Integer search_weight_to;

				public Integer getSearch_weight_to () {
					return this.search_weight_to;
				}
				
			    public String search_look;

				public String getSearch_look () {
					return this.search_look;
				}
				
			    public String search_has_children;

				public String getSearch_has_children () {
					return this.search_has_children;
				}
				
			    public String search_attraction;

				public String getSearch_attraction () {
					return this.search_attraction;
				}
				
			    public String search_hair_style;

				public String getSearch_hair_style () {
					return this.search_hair_style;
				}
				
			    public String search_hair_color;

				public String getSearch_hair_color () {
					return this.search_hair_color;
				}
				
			    public String search_eyes;

				public String getSearch_eyes () {
					return this.search_eyes;
				}
				
			    public String search_living_style;

				public String getSearch_living_style () {
					return this.search_living_style;
				}
				
			    public String search_nationality;

				public String getSearch_nationality () {
					return this.search_nationality;
				}
				
			    public String search_ethnicity;

				public String getSearch_ethnicity () {
					return this.search_ethnicity;
				}
				
			    public String search_live_with;

				public String getSearch_live_with () {
					return this.search_live_with;
				}
				
			    public String search_pet;

				public String getSearch_pet () {
					return this.search_pet;
				}
				
			    public String search_studies;

				public String getSearch_studies () {
					return this.search_studies;
				}
				
			    public String search_language;

				public String getSearch_language () {
					return this.search_language;
				}
				
			    public String search_job;

				public String getSearch_job () {
					return this.search_job;
				}
				
			    public String search_income;

				public String getSearch_income () {
					return this.search_income;
				}
				
			    public String search_hobbies;

				public String getSearch_hobbies () {
					return this.search_hobbies;
				}
				
			    public String search_leisure;

				public String getSearch_leisure () {
					return this.search_leisure;
				}
				
			    public String search_music;

				public String getSearch_music () {
					return this.search_music;
				}
				
			    public String search_movie;

				public String getSearch_movie () {
					return this.search_movie;
				}
				
			    public String search_sports;

				public String getSearch_sports () {
					return this.search_sports;
				}
				
			    public String search_temper;

				public String getSearch_temper () {
					return this.search_temper;
				}
				
			    public String search_food_habit;

				public String getSearch_food_habit () {
					return this.search_food_habit;
				}
				
			    public String search_romantic;

				public String getSearch_romantic () {
					return this.search_romantic;
				}
				
			    public String search_marriage;

				public String getSearch_marriage () {
					return this.search_marriage;
				}
				
			    public String search_religion_behaviour;

				public String getSearch_religion_behaviour () {
					return this.search_religion_behaviour;
				}
				
			    public String search_religion;

				public String getSearch_religion () {
					return this.search_religion;
				}
				
			    public String music;

				public String getMusic () {
					return this.music;
				}
				
			    public String leisure;

				public String getLeisure () {
					return this.leisure;
				}
				
			    public String hobbies;

				public String getHobbies () {
					return this.hobbies;
				}
				
			    public String movie;

				public String getMovie () {
					return this.movie;
				}
				
			    public String sports;

				public String getSports () {
					return this.sports;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.url = readString(dis);
					
					this.name = readString(dis);
					
						this.age = readInteger(dis);
					
						this.birthday = readInteger(dis);
					
						this.height = readInteger(dis);
					
						this.weight = readInteger(dis);
					
					this.city = readString(dis);
					
					this.region = readString(dis);
					
					this.photo = readString(dis);
					
					this.imperfection = readString(dis);
					
					this.description = readString(dis);
					
					this.nationality = readString(dis);
					
					this.relation_type = readString(dis);
					
					this.temper = readString(dis);
					
					this.romantic = readString(dis);
					
					this.marriage = readString(dis);
					
					this.children_wish = readString(dis);
					
					this.body_shape = readString(dis);
					
					this.attraction = readString(dis);
					
					this.living_style = readString(dis);
					
					this.look = readString(dis);
					
					this.ethnicity = readString(dis);
					
					this.eyes = readString(dis);
					
					this.hair_color = readString(dis);
					
					this.hair_style = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.smoker = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_children = null;
           				} else {
           			    	this.has_children = dis.readBoolean();
           				}
					
					this.live_with = readString(dis);
					
					this.job = readString(dis);
					
					this.religion = readString(dis);
					
					this.religion_behaviour = readString(dis);
					
					this.food_habit = readString(dis);
					
					this.pet = readString(dis);
					
					this.language = readString(dis);
					
					this.studies = readString(dis);
					
					this.income = readString(dis);
					
						this.search_age_from = readInteger(dis);
					
						this.search_age_to = readInteger(dis);
					
					this.search_body_shape = readString(dis);
					
					this.search_marital_status = readString(dis);
					
					this.search_children_wish = readString(dis);
					
					this.search_smoker = readString(dis);
					
						this.search_height_from = readInteger(dis);
					
						this.search_height_to = readInteger(dis);
					
						this.search_weight_from = readInteger(dis);
					
						this.search_weight_to = readInteger(dis);
					
					this.search_look = readString(dis);
					
					this.search_has_children = readString(dis);
					
					this.search_attraction = readString(dis);
					
					this.search_hair_style = readString(dis);
					
					this.search_hair_color = readString(dis);
					
					this.search_eyes = readString(dis);
					
					this.search_living_style = readString(dis);
					
					this.search_nationality = readString(dis);
					
					this.search_ethnicity = readString(dis);
					
					this.search_live_with = readString(dis);
					
					this.search_pet = readString(dis);
					
					this.search_studies = readString(dis);
					
					this.search_language = readString(dis);
					
					this.search_job = readString(dis);
					
					this.search_income = readString(dis);
					
					this.search_hobbies = readString(dis);
					
					this.search_leisure = readString(dis);
					
					this.search_music = readString(dis);
					
					this.search_movie = readString(dis);
					
					this.search_sports = readString(dis);
					
					this.search_temper = readString(dis);
					
					this.search_food_habit = readString(dis);
					
					this.search_romantic = readString(dis);
					
					this.search_marriage = readString(dis);
					
					this.search_religion_behaviour = readString(dis);
					
					this.search_religion = readString(dis);
					
					this.music = readString(dis);
					
					this.leisure = readString(dis);
					
					this.hobbies = readString(dis);
					
					this.movie = readString(dis);
					
					this.sports = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.age,dos);
					
					// Integer
				
						writeInteger(this.birthday,dos);
					
					// Integer
				
						writeInteger(this.height,dos);
					
					// Integer
				
						writeInteger(this.weight,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.photo,dos);
					
					// String
				
						writeString(this.imperfection,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.nationality,dos);
					
					// String
				
						writeString(this.relation_type,dos);
					
					// String
				
						writeString(this.temper,dos);
					
					// String
				
						writeString(this.romantic,dos);
					
					// String
				
						writeString(this.marriage,dos);
					
					// String
				
						writeString(this.children_wish,dos);
					
					// String
				
						writeString(this.body_shape,dos);
					
					// String
				
						writeString(this.attraction,dos);
					
					// String
				
						writeString(this.living_style,dos);
					
					// String
				
						writeString(this.look,dos);
					
					// String
				
						writeString(this.ethnicity,dos);
					
					// String
				
						writeString(this.eyes,dos);
					
					// String
				
						writeString(this.hair_color,dos);
					
					// String
				
						writeString(this.hair_style,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// Boolean
				
						if(this.has_children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_children);
		            	}
					
					// String
				
						writeString(this.live_with,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.religion,dos);
					
					// String
				
						writeString(this.religion_behaviour,dos);
					
					// String
				
						writeString(this.food_habit,dos);
					
					// String
				
						writeString(this.pet,dos);
					
					// String
				
						writeString(this.language,dos);
					
					// String
				
						writeString(this.studies,dos);
					
					// String
				
						writeString(this.income,dos);
					
					// Integer
				
						writeInteger(this.search_age_from,dos);
					
					// Integer
				
						writeInteger(this.search_age_to,dos);
					
					// String
				
						writeString(this.search_body_shape,dos);
					
					// String
				
						writeString(this.search_marital_status,dos);
					
					// String
				
						writeString(this.search_children_wish,dos);
					
					// String
				
						writeString(this.search_smoker,dos);
					
					// Integer
				
						writeInteger(this.search_height_from,dos);
					
					// Integer
				
						writeInteger(this.search_height_to,dos);
					
					// Integer
				
						writeInteger(this.search_weight_from,dos);
					
					// Integer
				
						writeInteger(this.search_weight_to,dos);
					
					// String
				
						writeString(this.search_look,dos);
					
					// String
				
						writeString(this.search_has_children,dos);
					
					// String
				
						writeString(this.search_attraction,dos);
					
					// String
				
						writeString(this.search_hair_style,dos);
					
					// String
				
						writeString(this.search_hair_color,dos);
					
					// String
				
						writeString(this.search_eyes,dos);
					
					// String
				
						writeString(this.search_living_style,dos);
					
					// String
				
						writeString(this.search_nationality,dos);
					
					// String
				
						writeString(this.search_ethnicity,dos);
					
					// String
				
						writeString(this.search_live_with,dos);
					
					// String
				
						writeString(this.search_pet,dos);
					
					// String
				
						writeString(this.search_studies,dos);
					
					// String
				
						writeString(this.search_language,dos);
					
					// String
				
						writeString(this.search_job,dos);
					
					// String
				
						writeString(this.search_income,dos);
					
					// String
				
						writeString(this.search_hobbies,dos);
					
					// String
				
						writeString(this.search_leisure,dos);
					
					// String
				
						writeString(this.search_music,dos);
					
					// String
				
						writeString(this.search_movie,dos);
					
					// String
				
						writeString(this.search_sports,dos);
					
					// String
				
						writeString(this.search_temper,dos);
					
					// String
				
						writeString(this.search_food_habit,dos);
					
					// String
				
						writeString(this.search_romantic,dos);
					
					// String
				
						writeString(this.search_marriage,dos);
					
					// String
				
						writeString(this.search_religion_behaviour,dos);
					
					// String
				
						writeString(this.search_religion,dos);
					
					// String
				
						writeString(this.music,dos);
					
					// String
				
						writeString(this.leisure,dos);
					
					// String
				
						writeString(this.hobbies,dos);
					
					// String
				
						writeString(this.movie,dos);
					
					// String
				
						writeString(this.sports,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",url="+url);
		sb.append(",name="+name);
		sb.append(",age="+String.valueOf(age));
		sb.append(",birthday="+String.valueOf(birthday));
		sb.append(",height="+String.valueOf(height));
		sb.append(",weight="+String.valueOf(weight));
		sb.append(",city="+city);
		sb.append(",region="+region);
		sb.append(",photo="+photo);
		sb.append(",imperfection="+imperfection);
		sb.append(",description="+description);
		sb.append(",nationality="+nationality);
		sb.append(",relation_type="+relation_type);
		sb.append(",temper="+temper);
		sb.append(",romantic="+romantic);
		sb.append(",marriage="+marriage);
		sb.append(",children_wish="+children_wish);
		sb.append(",body_shape="+body_shape);
		sb.append(",attraction="+attraction);
		sb.append(",living_style="+living_style);
		sb.append(",look="+look);
		sb.append(",ethnicity="+ethnicity);
		sb.append(",eyes="+eyes);
		sb.append(",hair_color="+hair_color);
		sb.append(",hair_style="+hair_style);
		sb.append(",marital_status="+marital_status);
		sb.append(",smoker="+smoker);
		sb.append(",has_children="+String.valueOf(has_children));
		sb.append(",live_with="+live_with);
		sb.append(",job="+job);
		sb.append(",religion="+religion);
		sb.append(",religion_behaviour="+religion_behaviour);
		sb.append(",food_habit="+food_habit);
		sb.append(",pet="+pet);
		sb.append(",language="+language);
		sb.append(",studies="+studies);
		sb.append(",income="+income);
		sb.append(",search_age_from="+String.valueOf(search_age_from));
		sb.append(",search_age_to="+String.valueOf(search_age_to));
		sb.append(",search_body_shape="+search_body_shape);
		sb.append(",search_marital_status="+search_marital_status);
		sb.append(",search_children_wish="+search_children_wish);
		sb.append(",search_smoker="+search_smoker);
		sb.append(",search_height_from="+String.valueOf(search_height_from));
		sb.append(",search_height_to="+String.valueOf(search_height_to));
		sb.append(",search_weight_from="+String.valueOf(search_weight_from));
		sb.append(",search_weight_to="+String.valueOf(search_weight_to));
		sb.append(",search_look="+search_look);
		sb.append(",search_has_children="+search_has_children);
		sb.append(",search_attraction="+search_attraction);
		sb.append(",search_hair_style="+search_hair_style);
		sb.append(",search_hair_color="+search_hair_color);
		sb.append(",search_eyes="+search_eyes);
		sb.append(",search_living_style="+search_living_style);
		sb.append(",search_nationality="+search_nationality);
		sb.append(",search_ethnicity="+search_ethnicity);
		sb.append(",search_live_with="+search_live_with);
		sb.append(",search_pet="+search_pet);
		sb.append(",search_studies="+search_studies);
		sb.append(",search_language="+search_language);
		sb.append(",search_job="+search_job);
		sb.append(",search_income="+search_income);
		sb.append(",search_hobbies="+search_hobbies);
		sb.append(",search_leisure="+search_leisure);
		sb.append(",search_music="+search_music);
		sb.append(",search_movie="+search_movie);
		sb.append(",search_sports="+search_sports);
		sb.append(",search_temper="+search_temper);
		sb.append(",search_food_habit="+search_food_habit);
		sb.append(",search_romantic="+search_romantic);
		sb.append(",search_marriage="+search_marriage);
		sb.append(",search_religion_behaviour="+search_religion_behaviour);
		sb.append(",search_religion="+search_religion);
		sb.append(",music="+music);
		sb.append(",leisure="+leisure);
		sb.append(",hobbies="+hobbies);
		sb.append(",movie="+movie);
		sb.append(",sports="+sports);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer age;

				public Integer getAge () {
					return this.age;
				}
				
			    public Integer birthday;

				public Integer getBirthday () {
					return this.birthday;
				}
				
			    public Integer height;

				public Integer getHeight () {
					return this.height;
				}
				
			    public Integer weight;

				public Integer getWeight () {
					return this.weight;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String photo;

				public String getPhoto () {
					return this.photo;
				}
				
			    public String imperfection;

				public String getImperfection () {
					return this.imperfection;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String nationality;

				public String getNationality () {
					return this.nationality;
				}
				
			    public String relation_type;

				public String getRelation_type () {
					return this.relation_type;
				}
				
			    public String temper;

				public String getTemper () {
					return this.temper;
				}
				
			    public String romantic;

				public String getRomantic () {
					return this.romantic;
				}
				
			    public String marriage;

				public String getMarriage () {
					return this.marriage;
				}
				
			    public String children_wish;

				public String getChildren_wish () {
					return this.children_wish;
				}
				
			    public String body_shape;

				public String getBody_shape () {
					return this.body_shape;
				}
				
			    public String attraction;

				public String getAttraction () {
					return this.attraction;
				}
				
			    public String living_style;

				public String getLiving_style () {
					return this.living_style;
				}
				
			    public String look;

				public String getLook () {
					return this.look;
				}
				
			    public String ethnicity;

				public String getEthnicity () {
					return this.ethnicity;
				}
				
			    public String eyes;

				public String getEyes () {
					return this.eyes;
				}
				
			    public String hair_color;

				public String getHair_color () {
					return this.hair_color;
				}
				
			    public String hair_style;

				public String getHair_style () {
					return this.hair_style;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public Boolean has_children;

				public Boolean getHas_children () {
					return this.has_children;
				}
				
			    public String live_with;

				public String getLive_with () {
					return this.live_with;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String religion;

				public String getReligion () {
					return this.religion;
				}
				
			    public String religion_behaviour;

				public String getReligion_behaviour () {
					return this.religion_behaviour;
				}
				
			    public String food_habit;

				public String getFood_habit () {
					return this.food_habit;
				}
				
			    public String pet;

				public String getPet () {
					return this.pet;
				}
				
			    public String language;

				public String getLanguage () {
					return this.language;
				}
				
			    public String studies;

				public String getStudies () {
					return this.studies;
				}
				
			    public String income;

				public String getIncome () {
					return this.income;
				}
				
			    public Integer search_age_from;

				public Integer getSearch_age_from () {
					return this.search_age_from;
				}
				
			    public Integer search_age_to;

				public Integer getSearch_age_to () {
					return this.search_age_to;
				}
				
			    public String search_body_shape;

				public String getSearch_body_shape () {
					return this.search_body_shape;
				}
				
			    public String search_marital_status;

				public String getSearch_marital_status () {
					return this.search_marital_status;
				}
				
			    public String search_children_wish;

				public String getSearch_children_wish () {
					return this.search_children_wish;
				}
				
			    public String search_smoker;

				public String getSearch_smoker () {
					return this.search_smoker;
				}
				
			    public Integer search_height_from;

				public Integer getSearch_height_from () {
					return this.search_height_from;
				}
				
			    public Integer search_height_to;

				public Integer getSearch_height_to () {
					return this.search_height_to;
				}
				
			    public Integer search_weight_from;

				public Integer getSearch_weight_from () {
					return this.search_weight_from;
				}
				
			    public Integer search_weight_to;

				public Integer getSearch_weight_to () {
					return this.search_weight_to;
				}
				
			    public String search_look;

				public String getSearch_look () {
					return this.search_look;
				}
				
			    public String search_has_children;

				public String getSearch_has_children () {
					return this.search_has_children;
				}
				
			    public String search_attraction;

				public String getSearch_attraction () {
					return this.search_attraction;
				}
				
			    public String search_hair_style;

				public String getSearch_hair_style () {
					return this.search_hair_style;
				}
				
			    public String search_hair_color;

				public String getSearch_hair_color () {
					return this.search_hair_color;
				}
				
			    public String search_eyes;

				public String getSearch_eyes () {
					return this.search_eyes;
				}
				
			    public String search_living_style;

				public String getSearch_living_style () {
					return this.search_living_style;
				}
				
			    public String search_nationality;

				public String getSearch_nationality () {
					return this.search_nationality;
				}
				
			    public String search_ethnicity;

				public String getSearch_ethnicity () {
					return this.search_ethnicity;
				}
				
			    public String search_live_with;

				public String getSearch_live_with () {
					return this.search_live_with;
				}
				
			    public String search_pet;

				public String getSearch_pet () {
					return this.search_pet;
				}
				
			    public String search_studies;

				public String getSearch_studies () {
					return this.search_studies;
				}
				
			    public String search_language;

				public String getSearch_language () {
					return this.search_language;
				}
				
			    public String search_job;

				public String getSearch_job () {
					return this.search_job;
				}
				
			    public String search_income;

				public String getSearch_income () {
					return this.search_income;
				}
				
			    public String search_hobbies;

				public String getSearch_hobbies () {
					return this.search_hobbies;
				}
				
			    public String search_leisure;

				public String getSearch_leisure () {
					return this.search_leisure;
				}
				
			    public String search_music;

				public String getSearch_music () {
					return this.search_music;
				}
				
			    public String search_movie;

				public String getSearch_movie () {
					return this.search_movie;
				}
				
			    public String search_sports;

				public String getSearch_sports () {
					return this.search_sports;
				}
				
			    public String search_temper;

				public String getSearch_temper () {
					return this.search_temper;
				}
				
			    public String search_food_habit;

				public String getSearch_food_habit () {
					return this.search_food_habit;
				}
				
			    public String search_romantic;

				public String getSearch_romantic () {
					return this.search_romantic;
				}
				
			    public String search_marriage;

				public String getSearch_marriage () {
					return this.search_marriage;
				}
				
			    public String search_religion_behaviour;

				public String getSearch_religion_behaviour () {
					return this.search_religion_behaviour;
				}
				
			    public String search_religion;

				public String getSearch_religion () {
					return this.search_religion;
				}
				
			    public String music;

				public String getMusic () {
					return this.music;
				}
				
			    public String leisure;

				public String getLeisure () {
					return this.leisure;
				}
				
			    public String hobbies;

				public String getHobbies () {
					return this.hobbies;
				}
				
			    public String movie;

				public String getMovie () {
					return this.movie;
				}
				
			    public String sports;

				public String getSports () {
					return this.sports;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.url = readString(dis);
					
					this.name = readString(dis);
					
						this.age = readInteger(dis);
					
						this.birthday = readInteger(dis);
					
						this.height = readInteger(dis);
					
						this.weight = readInteger(dis);
					
					this.city = readString(dis);
					
					this.region = readString(dis);
					
					this.photo = readString(dis);
					
					this.imperfection = readString(dis);
					
					this.description = readString(dis);
					
					this.nationality = readString(dis);
					
					this.relation_type = readString(dis);
					
					this.temper = readString(dis);
					
					this.romantic = readString(dis);
					
					this.marriage = readString(dis);
					
					this.children_wish = readString(dis);
					
					this.body_shape = readString(dis);
					
					this.attraction = readString(dis);
					
					this.living_style = readString(dis);
					
					this.look = readString(dis);
					
					this.ethnicity = readString(dis);
					
					this.eyes = readString(dis);
					
					this.hair_color = readString(dis);
					
					this.hair_style = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.smoker = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_children = null;
           				} else {
           			    	this.has_children = dis.readBoolean();
           				}
					
					this.live_with = readString(dis);
					
					this.job = readString(dis);
					
					this.religion = readString(dis);
					
					this.religion_behaviour = readString(dis);
					
					this.food_habit = readString(dis);
					
					this.pet = readString(dis);
					
					this.language = readString(dis);
					
					this.studies = readString(dis);
					
					this.income = readString(dis);
					
						this.search_age_from = readInteger(dis);
					
						this.search_age_to = readInteger(dis);
					
					this.search_body_shape = readString(dis);
					
					this.search_marital_status = readString(dis);
					
					this.search_children_wish = readString(dis);
					
					this.search_smoker = readString(dis);
					
						this.search_height_from = readInteger(dis);
					
						this.search_height_to = readInteger(dis);
					
						this.search_weight_from = readInteger(dis);
					
						this.search_weight_to = readInteger(dis);
					
					this.search_look = readString(dis);
					
					this.search_has_children = readString(dis);
					
					this.search_attraction = readString(dis);
					
					this.search_hair_style = readString(dis);
					
					this.search_hair_color = readString(dis);
					
					this.search_eyes = readString(dis);
					
					this.search_living_style = readString(dis);
					
					this.search_nationality = readString(dis);
					
					this.search_ethnicity = readString(dis);
					
					this.search_live_with = readString(dis);
					
					this.search_pet = readString(dis);
					
					this.search_studies = readString(dis);
					
					this.search_language = readString(dis);
					
					this.search_job = readString(dis);
					
					this.search_income = readString(dis);
					
					this.search_hobbies = readString(dis);
					
					this.search_leisure = readString(dis);
					
					this.search_music = readString(dis);
					
					this.search_movie = readString(dis);
					
					this.search_sports = readString(dis);
					
					this.search_temper = readString(dis);
					
					this.search_food_habit = readString(dis);
					
					this.search_romantic = readString(dis);
					
					this.search_marriage = readString(dis);
					
					this.search_religion_behaviour = readString(dis);
					
					this.search_religion = readString(dis);
					
					this.music = readString(dis);
					
					this.leisure = readString(dis);
					
					this.hobbies = readString(dis);
					
					this.movie = readString(dis);
					
					this.sports = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.age,dos);
					
					// Integer
				
						writeInteger(this.birthday,dos);
					
					// Integer
				
						writeInteger(this.height,dos);
					
					// Integer
				
						writeInteger(this.weight,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.photo,dos);
					
					// String
				
						writeString(this.imperfection,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.nationality,dos);
					
					// String
				
						writeString(this.relation_type,dos);
					
					// String
				
						writeString(this.temper,dos);
					
					// String
				
						writeString(this.romantic,dos);
					
					// String
				
						writeString(this.marriage,dos);
					
					// String
				
						writeString(this.children_wish,dos);
					
					// String
				
						writeString(this.body_shape,dos);
					
					// String
				
						writeString(this.attraction,dos);
					
					// String
				
						writeString(this.living_style,dos);
					
					// String
				
						writeString(this.look,dos);
					
					// String
				
						writeString(this.ethnicity,dos);
					
					// String
				
						writeString(this.eyes,dos);
					
					// String
				
						writeString(this.hair_color,dos);
					
					// String
				
						writeString(this.hair_style,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// Boolean
				
						if(this.has_children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_children);
		            	}
					
					// String
				
						writeString(this.live_with,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.religion,dos);
					
					// String
				
						writeString(this.religion_behaviour,dos);
					
					// String
				
						writeString(this.food_habit,dos);
					
					// String
				
						writeString(this.pet,dos);
					
					// String
				
						writeString(this.language,dos);
					
					// String
				
						writeString(this.studies,dos);
					
					// String
				
						writeString(this.income,dos);
					
					// Integer
				
						writeInteger(this.search_age_from,dos);
					
					// Integer
				
						writeInteger(this.search_age_to,dos);
					
					// String
				
						writeString(this.search_body_shape,dos);
					
					// String
				
						writeString(this.search_marital_status,dos);
					
					// String
				
						writeString(this.search_children_wish,dos);
					
					// String
				
						writeString(this.search_smoker,dos);
					
					// Integer
				
						writeInteger(this.search_height_from,dos);
					
					// Integer
				
						writeInteger(this.search_height_to,dos);
					
					// Integer
				
						writeInteger(this.search_weight_from,dos);
					
					// Integer
				
						writeInteger(this.search_weight_to,dos);
					
					// String
				
						writeString(this.search_look,dos);
					
					// String
				
						writeString(this.search_has_children,dos);
					
					// String
				
						writeString(this.search_attraction,dos);
					
					// String
				
						writeString(this.search_hair_style,dos);
					
					// String
				
						writeString(this.search_hair_color,dos);
					
					// String
				
						writeString(this.search_eyes,dos);
					
					// String
				
						writeString(this.search_living_style,dos);
					
					// String
				
						writeString(this.search_nationality,dos);
					
					// String
				
						writeString(this.search_ethnicity,dos);
					
					// String
				
						writeString(this.search_live_with,dos);
					
					// String
				
						writeString(this.search_pet,dos);
					
					// String
				
						writeString(this.search_studies,dos);
					
					// String
				
						writeString(this.search_language,dos);
					
					// String
				
						writeString(this.search_job,dos);
					
					// String
				
						writeString(this.search_income,dos);
					
					// String
				
						writeString(this.search_hobbies,dos);
					
					// String
				
						writeString(this.search_leisure,dos);
					
					// String
				
						writeString(this.search_music,dos);
					
					// String
				
						writeString(this.search_movie,dos);
					
					// String
				
						writeString(this.search_sports,dos);
					
					// String
				
						writeString(this.search_temper,dos);
					
					// String
				
						writeString(this.search_food_habit,dos);
					
					// String
				
						writeString(this.search_romantic,dos);
					
					// String
				
						writeString(this.search_marriage,dos);
					
					// String
				
						writeString(this.search_religion_behaviour,dos);
					
					// String
				
						writeString(this.search_religion,dos);
					
					// String
				
						writeString(this.music,dos);
					
					// String
				
						writeString(this.leisure,dos);
					
					// String
				
						writeString(this.hobbies,dos);
					
					// String
				
						writeString(this.movie,dos);
					
					// String
				
						writeString(this.sports,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",url="+url);
		sb.append(",name="+name);
		sb.append(",age="+String.valueOf(age));
		sb.append(",birthday="+String.valueOf(birthday));
		sb.append(",height="+String.valueOf(height));
		sb.append(",weight="+String.valueOf(weight));
		sb.append(",city="+city);
		sb.append(",region="+region);
		sb.append(",photo="+photo);
		sb.append(",imperfection="+imperfection);
		sb.append(",description="+description);
		sb.append(",nationality="+nationality);
		sb.append(",relation_type="+relation_type);
		sb.append(",temper="+temper);
		sb.append(",romantic="+romantic);
		sb.append(",marriage="+marriage);
		sb.append(",children_wish="+children_wish);
		sb.append(",body_shape="+body_shape);
		sb.append(",attraction="+attraction);
		sb.append(",living_style="+living_style);
		sb.append(",look="+look);
		sb.append(",ethnicity="+ethnicity);
		sb.append(",eyes="+eyes);
		sb.append(",hair_color="+hair_color);
		sb.append(",hair_style="+hair_style);
		sb.append(",marital_status="+marital_status);
		sb.append(",smoker="+smoker);
		sb.append(",has_children="+String.valueOf(has_children));
		sb.append(",live_with="+live_with);
		sb.append(",job="+job);
		sb.append(",religion="+religion);
		sb.append(",religion_behaviour="+religion_behaviour);
		sb.append(",food_habit="+food_habit);
		sb.append(",pet="+pet);
		sb.append(",language="+language);
		sb.append(",studies="+studies);
		sb.append(",income="+income);
		sb.append(",search_age_from="+String.valueOf(search_age_from));
		sb.append(",search_age_to="+String.valueOf(search_age_to));
		sb.append(",search_body_shape="+search_body_shape);
		sb.append(",search_marital_status="+search_marital_status);
		sb.append(",search_children_wish="+search_children_wish);
		sb.append(",search_smoker="+search_smoker);
		sb.append(",search_height_from="+String.valueOf(search_height_from));
		sb.append(",search_height_to="+String.valueOf(search_height_to));
		sb.append(",search_weight_from="+String.valueOf(search_weight_from));
		sb.append(",search_weight_to="+String.valueOf(search_weight_to));
		sb.append(",search_look="+search_look);
		sb.append(",search_has_children="+search_has_children);
		sb.append(",search_attraction="+search_attraction);
		sb.append(",search_hair_style="+search_hair_style);
		sb.append(",search_hair_color="+search_hair_color);
		sb.append(",search_eyes="+search_eyes);
		sb.append(",search_living_style="+search_living_style);
		sb.append(",search_nationality="+search_nationality);
		sb.append(",search_ethnicity="+search_ethnicity);
		sb.append(",search_live_with="+search_live_with);
		sb.append(",search_pet="+search_pet);
		sb.append(",search_studies="+search_studies);
		sb.append(",search_language="+search_language);
		sb.append(",search_job="+search_job);
		sb.append(",search_income="+search_income);
		sb.append(",search_hobbies="+search_hobbies);
		sb.append(",search_leisure="+search_leisure);
		sb.append(",search_music="+search_music);
		sb.append(",search_movie="+search_movie);
		sb.append(",search_sports="+search_sports);
		sb.append(",search_temper="+search_temper);
		sb.append(",search_food_habit="+search_food_habit);
		sb.append(",search_romantic="+search_romantic);
		sb.append(",search_marriage="+search_marriage);
		sb.append(",search_religion_behaviour="+search_religion_behaviour);
		sb.append(",search_religion="+search_religion);
		sb.append(",music="+music);
		sb.append(",leisure="+leisure);
		sb.append(",hobbies="+hobbies);
		sb.append(",movie="+movie);
		sb.append(",sports="+sports);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer age;

				public Integer getAge () {
					return this.age;
				}
				
			    public Integer birthday;

				public Integer getBirthday () {
					return this.birthday;
				}
				
			    public Integer height;

				public Integer getHeight () {
					return this.height;
				}
				
			    public Integer weight;

				public Integer getWeight () {
					return this.weight;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String photo;

				public String getPhoto () {
					return this.photo;
				}
				
			    public String imperfection;

				public String getImperfection () {
					return this.imperfection;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String nationality;

				public String getNationality () {
					return this.nationality;
				}
				
			    public String relation_type;

				public String getRelation_type () {
					return this.relation_type;
				}
				
			    public String temper;

				public String getTemper () {
					return this.temper;
				}
				
			    public String romantic;

				public String getRomantic () {
					return this.romantic;
				}
				
			    public String marriage;

				public String getMarriage () {
					return this.marriage;
				}
				
			    public String children_wish;

				public String getChildren_wish () {
					return this.children_wish;
				}
				
			    public String body_shape;

				public String getBody_shape () {
					return this.body_shape;
				}
				
			    public String attraction;

				public String getAttraction () {
					return this.attraction;
				}
				
			    public String living_style;

				public String getLiving_style () {
					return this.living_style;
				}
				
			    public String look;

				public String getLook () {
					return this.look;
				}
				
			    public String ethnicity;

				public String getEthnicity () {
					return this.ethnicity;
				}
				
			    public String eyes;

				public String getEyes () {
					return this.eyes;
				}
				
			    public String hair_color;

				public String getHair_color () {
					return this.hair_color;
				}
				
			    public String hair_style;

				public String getHair_style () {
					return this.hair_style;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String smoker;

				public String getSmoker () {
					return this.smoker;
				}
				
			    public Boolean has_children;

				public Boolean getHas_children () {
					return this.has_children;
				}
				
			    public String live_with;

				public String getLive_with () {
					return this.live_with;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String religion;

				public String getReligion () {
					return this.religion;
				}
				
			    public String religion_behaviour;

				public String getReligion_behaviour () {
					return this.religion_behaviour;
				}
				
			    public String food_habit;

				public String getFood_habit () {
					return this.food_habit;
				}
				
			    public String pet;

				public String getPet () {
					return this.pet;
				}
				
			    public String language;

				public String getLanguage () {
					return this.language;
				}
				
			    public String studies;

				public String getStudies () {
					return this.studies;
				}
				
			    public String income;

				public String getIncome () {
					return this.income;
				}
				
			    public Integer search_age_from;

				public Integer getSearch_age_from () {
					return this.search_age_from;
				}
				
			    public Integer search_age_to;

				public Integer getSearch_age_to () {
					return this.search_age_to;
				}
				
			    public String search_body_shape;

				public String getSearch_body_shape () {
					return this.search_body_shape;
				}
				
			    public String search_marital_status;

				public String getSearch_marital_status () {
					return this.search_marital_status;
				}
				
			    public String search_children_wish;

				public String getSearch_children_wish () {
					return this.search_children_wish;
				}
				
			    public String search_smoker;

				public String getSearch_smoker () {
					return this.search_smoker;
				}
				
			    public Integer search_height_from;

				public Integer getSearch_height_from () {
					return this.search_height_from;
				}
				
			    public Integer search_height_to;

				public Integer getSearch_height_to () {
					return this.search_height_to;
				}
				
			    public Integer search_weight_from;

				public Integer getSearch_weight_from () {
					return this.search_weight_from;
				}
				
			    public Integer search_weight_to;

				public Integer getSearch_weight_to () {
					return this.search_weight_to;
				}
				
			    public String search_look;

				public String getSearch_look () {
					return this.search_look;
				}
				
			    public String search_has_children;

				public String getSearch_has_children () {
					return this.search_has_children;
				}
				
			    public String search_attraction;

				public String getSearch_attraction () {
					return this.search_attraction;
				}
				
			    public String search_hair_style;

				public String getSearch_hair_style () {
					return this.search_hair_style;
				}
				
			    public String search_hair_color;

				public String getSearch_hair_color () {
					return this.search_hair_color;
				}
				
			    public String search_eyes;

				public String getSearch_eyes () {
					return this.search_eyes;
				}
				
			    public String search_living_style;

				public String getSearch_living_style () {
					return this.search_living_style;
				}
				
			    public String search_nationality;

				public String getSearch_nationality () {
					return this.search_nationality;
				}
				
			    public String search_ethnicity;

				public String getSearch_ethnicity () {
					return this.search_ethnicity;
				}
				
			    public String search_live_with;

				public String getSearch_live_with () {
					return this.search_live_with;
				}
				
			    public String search_pet;

				public String getSearch_pet () {
					return this.search_pet;
				}
				
			    public String search_studies;

				public String getSearch_studies () {
					return this.search_studies;
				}
				
			    public String search_language;

				public String getSearch_language () {
					return this.search_language;
				}
				
			    public String search_job;

				public String getSearch_job () {
					return this.search_job;
				}
				
			    public String search_income;

				public String getSearch_income () {
					return this.search_income;
				}
				
			    public String search_hobbies;

				public String getSearch_hobbies () {
					return this.search_hobbies;
				}
				
			    public String search_leisure;

				public String getSearch_leisure () {
					return this.search_leisure;
				}
				
			    public String search_music;

				public String getSearch_music () {
					return this.search_music;
				}
				
			    public String search_movie;

				public String getSearch_movie () {
					return this.search_movie;
				}
				
			    public String search_sports;

				public String getSearch_sports () {
					return this.search_sports;
				}
				
			    public String search_temper;

				public String getSearch_temper () {
					return this.search_temper;
				}
				
			    public String search_food_habit;

				public String getSearch_food_habit () {
					return this.search_food_habit;
				}
				
			    public String search_romantic;

				public String getSearch_romantic () {
					return this.search_romantic;
				}
				
			    public String search_marriage;

				public String getSearch_marriage () {
					return this.search_marriage;
				}
				
			    public String search_religion_behaviour;

				public String getSearch_religion_behaviour () {
					return this.search_religion_behaviour;
				}
				
			    public String search_religion;

				public String getSearch_religion () {
					return this.search_religion;
				}
				
			    public String music;

				public String getMusic () {
					return this.music;
				}
				
			    public String leisure;

				public String getLeisure () {
					return this.leisure;
				}
				
			    public String hobbies;

				public String getHobbies () {
					return this.hobbies;
				}
				
			    public String movie;

				public String getMovie () {
					return this.movie;
				}
				
			    public String sports;

				public String getSports () {
					return this.sports;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.url = readString(dis);
					
					this.name = readString(dis);
					
						this.age = readInteger(dis);
					
						this.birthday = readInteger(dis);
					
						this.height = readInteger(dis);
					
						this.weight = readInteger(dis);
					
					this.city = readString(dis);
					
					this.region = readString(dis);
					
					this.photo = readString(dis);
					
					this.imperfection = readString(dis);
					
					this.description = readString(dis);
					
					this.nationality = readString(dis);
					
					this.relation_type = readString(dis);
					
					this.temper = readString(dis);
					
					this.romantic = readString(dis);
					
					this.marriage = readString(dis);
					
					this.children_wish = readString(dis);
					
					this.body_shape = readString(dis);
					
					this.attraction = readString(dis);
					
					this.living_style = readString(dis);
					
					this.look = readString(dis);
					
					this.ethnicity = readString(dis);
					
					this.eyes = readString(dis);
					
					this.hair_color = readString(dis);
					
					this.hair_style = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.smoker = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_children = null;
           				} else {
           			    	this.has_children = dis.readBoolean();
           				}
					
					this.live_with = readString(dis);
					
					this.job = readString(dis);
					
					this.religion = readString(dis);
					
					this.religion_behaviour = readString(dis);
					
					this.food_habit = readString(dis);
					
					this.pet = readString(dis);
					
					this.language = readString(dis);
					
					this.studies = readString(dis);
					
					this.income = readString(dis);
					
						this.search_age_from = readInteger(dis);
					
						this.search_age_to = readInteger(dis);
					
					this.search_body_shape = readString(dis);
					
					this.search_marital_status = readString(dis);
					
					this.search_children_wish = readString(dis);
					
					this.search_smoker = readString(dis);
					
						this.search_height_from = readInteger(dis);
					
						this.search_height_to = readInteger(dis);
					
						this.search_weight_from = readInteger(dis);
					
						this.search_weight_to = readInteger(dis);
					
					this.search_look = readString(dis);
					
					this.search_has_children = readString(dis);
					
					this.search_attraction = readString(dis);
					
					this.search_hair_style = readString(dis);
					
					this.search_hair_color = readString(dis);
					
					this.search_eyes = readString(dis);
					
					this.search_living_style = readString(dis);
					
					this.search_nationality = readString(dis);
					
					this.search_ethnicity = readString(dis);
					
					this.search_live_with = readString(dis);
					
					this.search_pet = readString(dis);
					
					this.search_studies = readString(dis);
					
					this.search_language = readString(dis);
					
					this.search_job = readString(dis);
					
					this.search_income = readString(dis);
					
					this.search_hobbies = readString(dis);
					
					this.search_leisure = readString(dis);
					
					this.search_music = readString(dis);
					
					this.search_movie = readString(dis);
					
					this.search_sports = readString(dis);
					
					this.search_temper = readString(dis);
					
					this.search_food_habit = readString(dis);
					
					this.search_romantic = readString(dis);
					
					this.search_marriage = readString(dis);
					
					this.search_religion_behaviour = readString(dis);
					
					this.search_religion = readString(dis);
					
					this.music = readString(dis);
					
					this.leisure = readString(dis);
					
					this.hobbies = readString(dis);
					
					this.movie = readString(dis);
					
					this.sports = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.age,dos);
					
					// Integer
				
						writeInteger(this.birthday,dos);
					
					// Integer
				
						writeInteger(this.height,dos);
					
					// Integer
				
						writeInteger(this.weight,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.photo,dos);
					
					// String
				
						writeString(this.imperfection,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.nationality,dos);
					
					// String
				
						writeString(this.relation_type,dos);
					
					// String
				
						writeString(this.temper,dos);
					
					// String
				
						writeString(this.romantic,dos);
					
					// String
				
						writeString(this.marriage,dos);
					
					// String
				
						writeString(this.children_wish,dos);
					
					// String
				
						writeString(this.body_shape,dos);
					
					// String
				
						writeString(this.attraction,dos);
					
					// String
				
						writeString(this.living_style,dos);
					
					// String
				
						writeString(this.look,dos);
					
					// String
				
						writeString(this.ethnicity,dos);
					
					// String
				
						writeString(this.eyes,dos);
					
					// String
				
						writeString(this.hair_color,dos);
					
					// String
				
						writeString(this.hair_style,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.smoker,dos);
					
					// Boolean
				
						if(this.has_children == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_children);
		            	}
					
					// String
				
						writeString(this.live_with,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.religion,dos);
					
					// String
				
						writeString(this.religion_behaviour,dos);
					
					// String
				
						writeString(this.food_habit,dos);
					
					// String
				
						writeString(this.pet,dos);
					
					// String
				
						writeString(this.language,dos);
					
					// String
				
						writeString(this.studies,dos);
					
					// String
				
						writeString(this.income,dos);
					
					// Integer
				
						writeInteger(this.search_age_from,dos);
					
					// Integer
				
						writeInteger(this.search_age_to,dos);
					
					// String
				
						writeString(this.search_body_shape,dos);
					
					// String
				
						writeString(this.search_marital_status,dos);
					
					// String
				
						writeString(this.search_children_wish,dos);
					
					// String
				
						writeString(this.search_smoker,dos);
					
					// Integer
				
						writeInteger(this.search_height_from,dos);
					
					// Integer
				
						writeInteger(this.search_height_to,dos);
					
					// Integer
				
						writeInteger(this.search_weight_from,dos);
					
					// Integer
				
						writeInteger(this.search_weight_to,dos);
					
					// String
				
						writeString(this.search_look,dos);
					
					// String
				
						writeString(this.search_has_children,dos);
					
					// String
				
						writeString(this.search_attraction,dos);
					
					// String
				
						writeString(this.search_hair_style,dos);
					
					// String
				
						writeString(this.search_hair_color,dos);
					
					// String
				
						writeString(this.search_eyes,dos);
					
					// String
				
						writeString(this.search_living_style,dos);
					
					// String
				
						writeString(this.search_nationality,dos);
					
					// String
				
						writeString(this.search_ethnicity,dos);
					
					// String
				
						writeString(this.search_live_with,dos);
					
					// String
				
						writeString(this.search_pet,dos);
					
					// String
				
						writeString(this.search_studies,dos);
					
					// String
				
						writeString(this.search_language,dos);
					
					// String
				
						writeString(this.search_job,dos);
					
					// String
				
						writeString(this.search_income,dos);
					
					// String
				
						writeString(this.search_hobbies,dos);
					
					// String
				
						writeString(this.search_leisure,dos);
					
					// String
				
						writeString(this.search_music,dos);
					
					// String
				
						writeString(this.search_movie,dos);
					
					// String
				
						writeString(this.search_sports,dos);
					
					// String
				
						writeString(this.search_temper,dos);
					
					// String
				
						writeString(this.search_food_habit,dos);
					
					// String
				
						writeString(this.search_romantic,dos);
					
					// String
				
						writeString(this.search_marriage,dos);
					
					// String
				
						writeString(this.search_religion_behaviour,dos);
					
					// String
				
						writeString(this.search_religion,dos);
					
					// String
				
						writeString(this.music,dos);
					
					// String
				
						writeString(this.leisure,dos);
					
					// String
				
						writeString(this.hobbies,dos);
					
					// String
				
						writeString(this.movie,dos);
					
					// String
				
						writeString(this.sports,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",url="+url);
		sb.append(",name="+name);
		sb.append(",age="+String.valueOf(age));
		sb.append(",birthday="+String.valueOf(birthday));
		sb.append(",height="+String.valueOf(height));
		sb.append(",weight="+String.valueOf(weight));
		sb.append(",city="+city);
		sb.append(",region="+region);
		sb.append(",photo="+photo);
		sb.append(",imperfection="+imperfection);
		sb.append(",description="+description);
		sb.append(",nationality="+nationality);
		sb.append(",relation_type="+relation_type);
		sb.append(",temper="+temper);
		sb.append(",romantic="+romantic);
		sb.append(",marriage="+marriage);
		sb.append(",children_wish="+children_wish);
		sb.append(",body_shape="+body_shape);
		sb.append(",attraction="+attraction);
		sb.append(",living_style="+living_style);
		sb.append(",look="+look);
		sb.append(",ethnicity="+ethnicity);
		sb.append(",eyes="+eyes);
		sb.append(",hair_color="+hair_color);
		sb.append(",hair_style="+hair_style);
		sb.append(",marital_status="+marital_status);
		sb.append(",smoker="+smoker);
		sb.append(",has_children="+String.valueOf(has_children));
		sb.append(",live_with="+live_with);
		sb.append(",job="+job);
		sb.append(",religion="+religion);
		sb.append(",religion_behaviour="+religion_behaviour);
		sb.append(",food_habit="+food_habit);
		sb.append(",pet="+pet);
		sb.append(",language="+language);
		sb.append(",studies="+studies);
		sb.append(",income="+income);
		sb.append(",search_age_from="+String.valueOf(search_age_from));
		sb.append(",search_age_to="+String.valueOf(search_age_to));
		sb.append(",search_body_shape="+search_body_shape);
		sb.append(",search_marital_status="+search_marital_status);
		sb.append(",search_children_wish="+search_children_wish);
		sb.append(",search_smoker="+search_smoker);
		sb.append(",search_height_from="+String.valueOf(search_height_from));
		sb.append(",search_height_to="+String.valueOf(search_height_to));
		sb.append(",search_weight_from="+String.valueOf(search_weight_from));
		sb.append(",search_weight_to="+String.valueOf(search_weight_to));
		sb.append(",search_look="+search_look);
		sb.append(",search_has_children="+search_has_children);
		sb.append(",search_attraction="+search_attraction);
		sb.append(",search_hair_style="+search_hair_style);
		sb.append(",search_hair_color="+search_hair_color);
		sb.append(",search_eyes="+search_eyes);
		sb.append(",search_living_style="+search_living_style);
		sb.append(",search_nationality="+search_nationality);
		sb.append(",search_ethnicity="+search_ethnicity);
		sb.append(",search_live_with="+search_live_with);
		sb.append(",search_pet="+search_pet);
		sb.append(",search_studies="+search_studies);
		sb.append(",search_language="+search_language);
		sb.append(",search_job="+search_job);
		sb.append(",search_income="+search_income);
		sb.append(",search_hobbies="+search_hobbies);
		sb.append(",search_leisure="+search_leisure);
		sb.append(",search_music="+search_music);
		sb.append(",search_movie="+search_movie);
		sb.append(",search_sports="+search_sports);
		sb.append(",search_temper="+search_temper);
		sb.append(",search_food_habit="+search_food_habit);
		sb.append(",search_romantic="+search_romantic);
		sb.append(",search_marriage="+search_marriage);
		sb.append(",search_religion_behaviour="+search_religion_behaviour);
		sb.append(",search_religion="+search_religion);
		sb.append(",music="+music);
		sb.append(",leisure="+leisure);
		sb.append(",hobbies="+hobbies);
		sb.append(",movie="+movie);
		sb.append(",sports="+sports);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.file_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",file_name="+file_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out_contenuStruct implements routines.system.IPersistableRow<out_contenuStruct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
					this.file_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
		sb.append(",file_name="+file_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out_contenuStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
					this.file_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
		sb.append(",file_name="+file_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_2Struct implements routines.system.IPersistableRow<after_tHashInput_2Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
					this.file_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
		sb.append(",file_name="+file_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tMysqlInput_1Process(globalMap);

		row5Struct row5 = new row5Struct();
out_contenuStruct out_contenu = new out_contenuStruct();
out3Struct out3 = new out3Struct();
out3Struct row11 = out3;
row6Struct row6 = new row6Struct();
out2Struct out2 = new out2Struct();
out4Struct out4 = new out4Struct();









	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "b_girls";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
	conn_tMysqlOutput_1 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
	

int count_tMysqlOutput_1=0;
    	

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "b_girls" + "` (`id`,`url`,`name`,`age`,`birthday`,`height`,`weight`,`city`,`region`,`photo`,`imperfection`,`description`,`nationality`,`relation_type`,`temper`,`romantic`,`marriage`,`children_wish`,`body_shape`,`attraction`,`living_style`,`look`,`ethnicity`,`eyes`,`hair_color`,`hair_style`,`marital_status`,`smoker`,`has_children`,`live_with`,`job`,`religion`,`religion_behaviour`,`food_habit`,`pet`,`language`,`studies`,`income`,`search_age_from`,`search_age_to`,`search_body_shape`,`search_marital_status`,`search_children_wish`,`search_smoker`,`search_height_from`,`search_height_to`,`search_weight_from`,`search_weight_to`,`search_look`,`search_has_children`,`search_attraction`,`search_hair_style`,`search_hair_color`,`search_eyes`,`search_living_style`,`search_nationality`,`search_ethnicity`,`search_live_with`,`search_pet`,`search_studies`,`search_language`,`search_job`,`search_income`,`search_hobbies`,`search_leisure`,`search_music`,`search_movie`,`search_sports`,`search_temper`,`search_food_habit`,`search_romantic`,`search_marriage`,`search_religion_behaviour`,`search_religion`,`music`,`leisure`,`hobbies`,`movie`,`sports`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		
    	class BytesLimit65535_tMap_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_6().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
row6Struct row6_tmp = new row6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Users/Hao/Desktop/teste.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[79];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(",");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator(",");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="id";
                                    headColutFileOutputDelimited_1[1]="url";
                                    headColutFileOutputDelimited_1[2]="name";
                                    headColutFileOutputDelimited_1[3]="age";
                                    headColutFileOutputDelimited_1[4]="birthday";
                                    headColutFileOutputDelimited_1[5]="height";
                                    headColutFileOutputDelimited_1[6]="weight";
                                    headColutFileOutputDelimited_1[7]="city";
                                    headColutFileOutputDelimited_1[8]="region";
                                    headColutFileOutputDelimited_1[9]="photo";
                                    headColutFileOutputDelimited_1[10]="imperfection";
                                    headColutFileOutputDelimited_1[11]="description";
                                    headColutFileOutputDelimited_1[12]="nationality";
                                    headColutFileOutputDelimited_1[13]="relation_type";
                                    headColutFileOutputDelimited_1[14]="temper";
                                    headColutFileOutputDelimited_1[15]="romantic";
                                    headColutFileOutputDelimited_1[16]="marriage";
                                    headColutFileOutputDelimited_1[17]="children_wish";
                                    headColutFileOutputDelimited_1[18]="body_shape";
                                    headColutFileOutputDelimited_1[19]="attraction";
                                    headColutFileOutputDelimited_1[20]="living_style";
                                    headColutFileOutputDelimited_1[21]="look";
                                    headColutFileOutputDelimited_1[22]="ethnicity";
                                    headColutFileOutputDelimited_1[23]="eyes";
                                    headColutFileOutputDelimited_1[24]="hair_color";
                                    headColutFileOutputDelimited_1[25]="hair_style";
                                    headColutFileOutputDelimited_1[26]="marital_status";
                                    headColutFileOutputDelimited_1[27]="smoker";
                                    headColutFileOutputDelimited_1[28]="has_children";
                                    headColutFileOutputDelimited_1[29]="live_with";
                                    headColutFileOutputDelimited_1[30]="job";
                                    headColutFileOutputDelimited_1[31]="religion";
                                    headColutFileOutputDelimited_1[32]="religion_behaviour";
                                    headColutFileOutputDelimited_1[33]="food_habit";
                                    headColutFileOutputDelimited_1[34]="pet";
                                    headColutFileOutputDelimited_1[35]="language";
                                    headColutFileOutputDelimited_1[36]="studies";
                                    headColutFileOutputDelimited_1[37]="income";
                                    headColutFileOutputDelimited_1[38]="search_age_from";
                                    headColutFileOutputDelimited_1[39]="search_age_to";
                                    headColutFileOutputDelimited_1[40]="search_body_shape";
                                    headColutFileOutputDelimited_1[41]="search_marital_status";
                                    headColutFileOutputDelimited_1[42]="search_children_wish";
                                    headColutFileOutputDelimited_1[43]="search_smoker";
                                    headColutFileOutputDelimited_1[44]="search_height_from";
                                    headColutFileOutputDelimited_1[45]="search_height_to";
                                    headColutFileOutputDelimited_1[46]="search_weight_from";
                                    headColutFileOutputDelimited_1[47]="search_weight_to";
                                    headColutFileOutputDelimited_1[48]="search_look";
                                    headColutFileOutputDelimited_1[49]="search_has_children";
                                    headColutFileOutputDelimited_1[50]="search_attraction";
                                    headColutFileOutputDelimited_1[51]="search_hair_style";
                                    headColutFileOutputDelimited_1[52]="search_hair_color";
                                    headColutFileOutputDelimited_1[53]="search_eyes";
                                    headColutFileOutputDelimited_1[54]="search_living_style";
                                    headColutFileOutputDelimited_1[55]="search_nationality";
                                    headColutFileOutputDelimited_1[56]="search_ethnicity";
                                    headColutFileOutputDelimited_1[57]="search_live_with";
                                    headColutFileOutputDelimited_1[58]="search_pet";
                                    headColutFileOutputDelimited_1[59]="search_studies";
                                    headColutFileOutputDelimited_1[60]="search_language";
                                    headColutFileOutputDelimited_1[61]="search_job";
                                    headColutFileOutputDelimited_1[62]="search_income";
                                    headColutFileOutputDelimited_1[63]="search_hobbies";
                                    headColutFileOutputDelimited_1[64]="search_leisure";
                                    headColutFileOutputDelimited_1[65]="search_music";
                                    headColutFileOutputDelimited_1[66]="search_movie";
                                    headColutFileOutputDelimited_1[67]="search_sports";
                                    headColutFileOutputDelimited_1[68]="search_temper";
                                    headColutFileOutputDelimited_1[69]="search_food_habit";
                                    headColutFileOutputDelimited_1[70]="search_romantic";
                                    headColutFileOutputDelimited_1[71]="search_marriage";
                                    headColutFileOutputDelimited_1[72]="search_religion_behaviour";
                                    headColutFileOutputDelimited_1[73]="search_religion";
                                    headColutFileOutputDelimited_1[74]="music";
                                    headColutFileOutputDelimited_1[75]="leisure";
                                    headColutFileOutputDelimited_1[76]="hobbies";
                                    headColutFileOutputDelimited_1[77]="movie";
                                    headColutFileOutputDelimited_1[78]="sports";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_3 = 0;
		
    	class BytesLimit65535_tHashOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashOutput_3().limitLog4jByte();



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out4Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_b_meetic_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;
 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out_contenu" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		
    	class BytesLimit65535_tMap_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_5().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out_contenuStruct out_contenu_tmp = new out_contenuStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		
    	class BytesLimit65535_tHashInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_2().limitLog4jByte();


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_b_meetic_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out1Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    out1Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row5.line = next_tHashInput_2.line;
	row5.file_name = next_tHashInput_2.file_name;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out_contenu = null;


// # Output table : 'out_contenu'
out_contenu_tmp.line = row5.line ;
out_contenu_tmp.file_name = row5.file_name ;
out_contenu = out_contenu_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "out_contenu"
if(out_contenu != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//out_contenu
			//out_contenu


			
				if(execStat){
					runStat.updateStatOnConnection("out_contenu"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out3 = null;
out4 = null;


// # Output table : 'out3'
out3_tmp.id = Hao.get_number_from_string(Hao.get_id_from_url(out_contenu.line)) ;
out3_tmp.url = Hao.get_url(out_contenu.line) ;
out3_tmp.name = Hao.get_infos_from_contenu(out_contenu.line , "name") ;
out3_tmp.age = Hao.get_number_from_string(Hao.get_infos_from_contenu(out_contenu.line , "age") ) ;
out3_tmp.birthday = Hao.get_birthday(
Hao.get_number_from_string(Hao.get_infos_from_contenu(out_contenu.line , "age") ) ) ;
out3_tmp.height = Hao.get_number_from_string(Hao.get_personnalite_from_contenu(out_contenu.line , "height")) ;
out3_tmp.weight = Hao.get_number_from_string(Hao.get_personnalite_from_contenu(out_contenu.line , "weight")) ;
out3_tmp.city = Hao.get_title_from_contenu(out_contenu.line , "city") ;
out3_tmp.region = Hao.get_title_from_contenu(out_contenu.line , "region") ;
out3_tmp.photo = Hao.get_infos_from_contenu(out_contenu.line , "photo") ;
out3_tmp.imperfection = Hao.get_physique_from_contenu(out_contenu.line , "imperfection") ;
out3_tmp.description = Hao.get_title_from_contenu(out_contenu.line , "essay") ;
out3_tmp.nationality = Hao.get_personnalite_from_contenu(out_contenu.line , "nationality") ;
out3_tmp.relation_type = Hao.get_personnalite_from_contenu(out_contenu.line , "relation_type") ;
out3_tmp.temper = Hao.get_personnalite_from_contenu(out_contenu.line , "temper") ;
out3_tmp.romantic = Hao.get_personnalite_from_contenu(out_contenu.line , "romantic") ;
out3_tmp.marriage = Hao.get_personnalite_from_contenu(out_contenu.line , "marriage") ;
out3_tmp.children_wish = Hao.get_personnalite_from_contenu(out_contenu.line , "children_wish") ;
out3_tmp.body_shape = Hao.get_personnalite_from_contenu(out_contenu.line , "body_shape") ;
out3_tmp.attraction = Hao.get_personnalite_from_contenu(out_contenu.line , "attraction") ;
out3_tmp.living_style = Hao.get_personnalite_from_contenu(out_contenu.line , "living_style") ;
out3_tmp.look = Hao.get_personnalite_from_contenu(out_contenu.line , "look") ;
out3_tmp.ethnicity = Hao.get_mode_from_contenu(out_contenu.line , "ethnicity") ;
out3_tmp.eyes = Hao.get_personnalite_from_contenu(out_contenu.line , "eyes") ;
out3_tmp.hair_color = Hao.get_personnalite_from_contenu(out_contenu.line , "hair_color") ;
out3_tmp.hair_style = Hao.get_personnalite_from_contenu(out_contenu.line , "hair_style") ;
out3_tmp.marital_status = Hao.get_personnalite_from_contenu(out_contenu.line , "marital_status") ;
out3_tmp.smoker = Hao.get_personnalite_from_contenu(out_contenu.line , "smoker") ;
out3_tmp.has_children = Hao.get_boolean_from_string(Hao.get_personnalite_from_contenu(out_contenu.line , "has_children") ) ;
out3_tmp.live_with = Hao.get_personnalite_from_contenu(out_contenu.line , "live_with") ;
out3_tmp.job = Hao.get_personnalite_from_contenu(out_contenu.line , "job") ;
out3_tmp.religion = Hao.get_personnalite_from_contenu(out_contenu.line , "religion") ;
out3_tmp.religion_behaviour = Hao.get_personnalite_from_contenu(out_contenu.line , "religion_behaviour") ;
out3_tmp.food_habit = Hao.get_personnalite_from_contenu(out_contenu.line , "food_habit") ;
out3_tmp.pet = Hao.get_mode_from_contenu(out_contenu.line , "pet") ;
out3_tmp.language = Hao.get_mode_from_contenu(out_contenu.line , "language") ;
out3_tmp.studies = Hao.get_personnalite_from_contenu(out_contenu.line , "studies") ;
out3_tmp.income = Hao.get_mode_from_contenu(out_contenu.line , "income") ;
out3_tmp.search_age_from = Hao.get_search_age(Hao.get_search_card_span(out_contenu.line , "age"),1) ;
out3_tmp.search_age_to = Hao.get_search_age(Hao.get_search_card_span(out_contenu.line , "age"),2) ;
out3_tmp.search_body_shape = Hao.get_search_card_span(out_contenu.line , "body_shape") ;
out3_tmp.search_marital_status = Hao.get_search_card_span(out_contenu.line , "marital_status") ;
out3_tmp.search_children_wish = Hao.get_search_card_span(out_contenu.line , "children_wish") ;
out3_tmp.search_smoker = Hao.get_search_card_span(out_contenu.line , "smoker") ;
out3_tmp.search_height_from = Hao.get_search_age(Hao.get_search_card_span(out_contenu.line , "height"),1) ;
out3_tmp.search_height_to = Hao.get_search_age(Hao.get_search_card_span(out_contenu.line , "height"),2) ;
out3_tmp.search_weight_from = Hao.get_search_age(Hao.get_search_card_span(out_contenu.line , "weight"),1) ;
out3_tmp.search_weight_to = Hao.get_search_age(Hao.get_search_card_span(out_contenu.line , "weight"),2) ;
out3_tmp.search_look = Hao.get_search_card_span(out_contenu.line , "look") ;
out3_tmp.search_has_children = Hao.get_search_card_span(out_contenu.line , "has_children") ;
out3_tmp.search_attraction = Hao.get_search_card_span(out_contenu.line , "attraction") ;
out3_tmp.search_hair_style = Hao.get_search_card_span(out_contenu.line , "hair_style") ;
out3_tmp.search_hair_color = Hao.get_search_card_span(out_contenu.line , "hair_color") ;
out3_tmp.search_eyes = Hao.get_search_card_span(out_contenu.line , "eyes") ;
out3_tmp.search_living_style = Hao.get_search_card_span(out_contenu.line , "living_style") ;
out3_tmp.search_nationality = Hao.get_search_card_span(out_contenu.line , "nationality") ;
out3_tmp.search_ethnicity = Hao.get_search_card_span(out_contenu.line , "ethnicity") ;
out3_tmp.search_live_with = Hao.get_search_card_span(out_contenu.line , "live_with") ;
out3_tmp.search_pet = Hao.get_search_card_span(out_contenu.line , "pet") ;
out3_tmp.search_studies = Hao.get_search_card_span(out_contenu.line , "studies") ;
out3_tmp.search_language = Hao.get_search_card_span(out_contenu.line , "language") ;
out3_tmp.search_job = Hao.get_search_card_span(out_contenu.line , "job") ;
out3_tmp.search_income = Hao.get_search_card_span(out_contenu.line , "income") ;
out3_tmp.search_hobbies = Hao.get_search_card_span(out_contenu.line , "hobbies") ;
out3_tmp.search_leisure = Hao.get_search_card_span(out_contenu.line , "leisure") ;
out3_tmp.search_music = Hao.get_search_card_span(out_contenu.line , "music") ;
out3_tmp.search_movie = Hao.get_search_card_span(out_contenu.line , "movie") ;
out3_tmp.search_sports = Hao.get_search_card_span(out_contenu.line , "sports") ;
out3_tmp.search_temper = Hao.get_search_card_span(out_contenu.line , "temper") ;
out3_tmp.search_food_habit = Hao.get_search_card_span(out_contenu.line , "food_habit") ;
out3_tmp.search_romantic = Hao.get_search_card_span(out_contenu.line , "romantic") ;
out3_tmp.search_marriage = Hao.get_search_card_span(out_contenu.line , "marriage") ;
out3_tmp.search_religion_behaviour = Hao.get_search_card_span(out_contenu.line , "religion_behaviour") ;
out3_tmp.search_religion = Hao.get_search_card_span(out_contenu.line , "religion") ;
out3_tmp.music = Hao.get_interest(out_contenu.line, "music") ;
out3_tmp.leisure = Hao.get_interest(out_contenu.line, "leisure") ;
out3_tmp.hobbies = Hao.get_interest(out_contenu.line, "hobbies") ;
out3_tmp.movie = Hao.get_interest(out_contenu.line, "movie") ;
out3_tmp.sports = Hao.get_interest(out_contenu.line, "sports") ;
out3 = out3_tmp;

// # Output table : 'out4'
out4_tmp.id = Hao.get_number_from_string(Hao.get_id_from_url(out_contenu.line)) ;
out4_tmp.file_name = out_contenu.file_name ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//out3
			//out3


			
				if(execStat){
					runStat.updateStatOnConnection("out3"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_1=new String[79];
                            rowtFileOutputDelimited_1[0]=out3.id == null ? null : String.valueOf(out3.id);
                            rowtFileOutputDelimited_1[1]=out3.url == null ? null : out3.url;
                            rowtFileOutputDelimited_1[2]=out3.name == null ? null : out3.name;
                            rowtFileOutputDelimited_1[3]=out3.age == null ? null : String.valueOf(out3.age);
                            rowtFileOutputDelimited_1[4]=out3.birthday == null ? null : String.valueOf(out3.birthday);
                            rowtFileOutputDelimited_1[5]=out3.height == null ? null : String.valueOf(out3.height);
                            rowtFileOutputDelimited_1[6]=out3.weight == null ? null : String.valueOf(out3.weight);
                            rowtFileOutputDelimited_1[7]=out3.city == null ? null : out3.city;
                            rowtFileOutputDelimited_1[8]=out3.region == null ? null : out3.region;
                            rowtFileOutputDelimited_1[9]=out3.photo == null ? null : out3.photo;
                            rowtFileOutputDelimited_1[10]=out3.imperfection == null ? null : out3.imperfection;
                            rowtFileOutputDelimited_1[11]=out3.description == null ? null : out3.description;
                            rowtFileOutputDelimited_1[12]=out3.nationality == null ? null : out3.nationality;
                            rowtFileOutputDelimited_1[13]=out3.relation_type == null ? null : out3.relation_type;
                            rowtFileOutputDelimited_1[14]=out3.temper == null ? null : out3.temper;
                            rowtFileOutputDelimited_1[15]=out3.romantic == null ? null : out3.romantic;
                            rowtFileOutputDelimited_1[16]=out3.marriage == null ? null : out3.marriage;
                            rowtFileOutputDelimited_1[17]=out3.children_wish == null ? null : out3.children_wish;
                            rowtFileOutputDelimited_1[18]=out3.body_shape == null ? null : out3.body_shape;
                            rowtFileOutputDelimited_1[19]=out3.attraction == null ? null : out3.attraction;
                            rowtFileOutputDelimited_1[20]=out3.living_style == null ? null : out3.living_style;
                            rowtFileOutputDelimited_1[21]=out3.look == null ? null : out3.look;
                            rowtFileOutputDelimited_1[22]=out3.ethnicity == null ? null : out3.ethnicity;
                            rowtFileOutputDelimited_1[23]=out3.eyes == null ? null : out3.eyes;
                            rowtFileOutputDelimited_1[24]=out3.hair_color == null ? null : out3.hair_color;
                            rowtFileOutputDelimited_1[25]=out3.hair_style == null ? null : out3.hair_style;
                            rowtFileOutputDelimited_1[26]=out3.marital_status == null ? null : out3.marital_status;
                            rowtFileOutputDelimited_1[27]=out3.smoker == null ? null : out3.smoker;
                            rowtFileOutputDelimited_1[28]=out3.has_children == null ? null : String.valueOf(out3.has_children);
                            rowtFileOutputDelimited_1[29]=out3.live_with == null ? null : out3.live_with;
                            rowtFileOutputDelimited_1[30]=out3.job == null ? null : out3.job;
                            rowtFileOutputDelimited_1[31]=out3.religion == null ? null : out3.religion;
                            rowtFileOutputDelimited_1[32]=out3.religion_behaviour == null ? null : out3.religion_behaviour;
                            rowtFileOutputDelimited_1[33]=out3.food_habit == null ? null : out3.food_habit;
                            rowtFileOutputDelimited_1[34]=out3.pet == null ? null : out3.pet;
                            rowtFileOutputDelimited_1[35]=out3.language == null ? null : out3.language;
                            rowtFileOutputDelimited_1[36]=out3.studies == null ? null : out3.studies;
                            rowtFileOutputDelimited_1[37]=out3.income == null ? null : out3.income;
                            rowtFileOutputDelimited_1[38]=out3.search_age_from == null ? null : String.valueOf(out3.search_age_from);
                            rowtFileOutputDelimited_1[39]=out3.search_age_to == null ? null : String.valueOf(out3.search_age_to);
                            rowtFileOutputDelimited_1[40]=out3.search_body_shape == null ? null : out3.search_body_shape;
                            rowtFileOutputDelimited_1[41]=out3.search_marital_status == null ? null : out3.search_marital_status;
                            rowtFileOutputDelimited_1[42]=out3.search_children_wish == null ? null : out3.search_children_wish;
                            rowtFileOutputDelimited_1[43]=out3.search_smoker == null ? null : out3.search_smoker;
                            rowtFileOutputDelimited_1[44]=out3.search_height_from == null ? null : String.valueOf(out3.search_height_from);
                            rowtFileOutputDelimited_1[45]=out3.search_height_to == null ? null : String.valueOf(out3.search_height_to);
                            rowtFileOutputDelimited_1[46]=out3.search_weight_from == null ? null : String.valueOf(out3.search_weight_from);
                            rowtFileOutputDelimited_1[47]=out3.search_weight_to == null ? null : String.valueOf(out3.search_weight_to);
                            rowtFileOutputDelimited_1[48]=out3.search_look == null ? null : out3.search_look;
                            rowtFileOutputDelimited_1[49]=out3.search_has_children == null ? null : out3.search_has_children;
                            rowtFileOutputDelimited_1[50]=out3.search_attraction == null ? null : out3.search_attraction;
                            rowtFileOutputDelimited_1[51]=out3.search_hair_style == null ? null : out3.search_hair_style;
                            rowtFileOutputDelimited_1[52]=out3.search_hair_color == null ? null : out3.search_hair_color;
                            rowtFileOutputDelimited_1[53]=out3.search_eyes == null ? null : out3.search_eyes;
                            rowtFileOutputDelimited_1[54]=out3.search_living_style == null ? null : out3.search_living_style;
                            rowtFileOutputDelimited_1[55]=out3.search_nationality == null ? null : out3.search_nationality;
                            rowtFileOutputDelimited_1[56]=out3.search_ethnicity == null ? null : out3.search_ethnicity;
                            rowtFileOutputDelimited_1[57]=out3.search_live_with == null ? null : out3.search_live_with;
                            rowtFileOutputDelimited_1[58]=out3.search_pet == null ? null : out3.search_pet;
                            rowtFileOutputDelimited_1[59]=out3.search_studies == null ? null : out3.search_studies;
                            rowtFileOutputDelimited_1[60]=out3.search_language == null ? null : out3.search_language;
                            rowtFileOutputDelimited_1[61]=out3.search_job == null ? null : out3.search_job;
                            rowtFileOutputDelimited_1[62]=out3.search_income == null ? null : out3.search_income;
                            rowtFileOutputDelimited_1[63]=out3.search_hobbies == null ? null : out3.search_hobbies;
                            rowtFileOutputDelimited_1[64]=out3.search_leisure == null ? null : out3.search_leisure;
                            rowtFileOutputDelimited_1[65]=out3.search_music == null ? null : out3.search_music;
                            rowtFileOutputDelimited_1[66]=out3.search_movie == null ? null : out3.search_movie;
                            rowtFileOutputDelimited_1[67]=out3.search_sports == null ? null : out3.search_sports;
                            rowtFileOutputDelimited_1[68]=out3.search_temper == null ? null : out3.search_temper;
                            rowtFileOutputDelimited_1[69]=out3.search_food_habit == null ? null : out3.search_food_habit;
                            rowtFileOutputDelimited_1[70]=out3.search_romantic == null ? null : out3.search_romantic;
                            rowtFileOutputDelimited_1[71]=out3.search_marriage == null ? null : out3.search_marriage;
                            rowtFileOutputDelimited_1[72]=out3.search_religion_behaviour == null ? null : out3.search_religion_behaviour;
                            rowtFileOutputDelimited_1[73]=out3.search_religion == null ? null : out3.search_religion;
                            rowtFileOutputDelimited_1[74]=out3.music == null ? null : out3.music;
                            rowtFileOutputDelimited_1[75]=out3.leisure == null ? null : out3.leisure;
                            rowtFileOutputDelimited_1[76]=out3.hobbies == null ? null : out3.hobbies;
                            rowtFileOutputDelimited_1[77]=out3.movie == null ? null : out3.movie;
                            rowtFileOutputDelimited_1[78]=out3.sports == null ? null : out3.sports;
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 
     row11 = out3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

row6 = null;


// # Output table : 'row6'
// # Filter conditions 
if( 

row11.id!=null && (!row11.id.equals(""))

 ) {
row6_tmp.id = row11.id ;
row6_tmp.url = row11.url ;
row6_tmp.name = row11.name ;
row6_tmp.age = row11.age ;
row6_tmp.birthday = row11.birthday ;
row6_tmp.height = row11.height ;
row6_tmp.weight = row11.weight ;
row6_tmp.city = row11.city ;
row6_tmp.region = row11.region ;
row6_tmp.photo = row11.photo ;
row6_tmp.imperfection = row11.imperfection ;
row6_tmp.description = row11.description ;
row6_tmp.nationality = row11.nationality ;
row6_tmp.relation_type = row11.relation_type ;
row6_tmp.temper = row11.temper ;
row6_tmp.romantic = row11.romantic ;
row6_tmp.marriage = row11.marriage ;
row6_tmp.children_wish = row11.children_wish ;
row6_tmp.body_shape = row11.body_shape ;
row6_tmp.attraction = row11.attraction ;
row6_tmp.living_style = row11.living_style ;
row6_tmp.look = row11.look ;
row6_tmp.ethnicity = row11.ethnicity ;
row6_tmp.eyes = row11.eyes ;
row6_tmp.hair_color = row11.hair_color ;
row6_tmp.hair_style = row11.hair_style ;
row6_tmp.marital_status = row11.marital_status ;
row6_tmp.smoker = row11.smoker ;
row6_tmp.has_children = row11.has_children ;
row6_tmp.live_with = row11.live_with ;
row6_tmp.job = row11.job ;
row6_tmp.religion = row11.religion ;
row6_tmp.religion_behaviour = row11.religion_behaviour ;
row6_tmp.food_habit = row11.food_habit ;
row6_tmp.pet = row11.pet ;
row6_tmp.language = row11.language ;
row6_tmp.studies = row11.studies ;
row6_tmp.income = row11.income ;
row6_tmp.search_age_from = row11.search_age_from ;
row6_tmp.search_age_to = row11.search_age_to ;
row6_tmp.search_body_shape = row11.search_body_shape ;
row6_tmp.search_marital_status = row11.search_marital_status ;
row6_tmp.search_children_wish = row11.search_children_wish ;
row6_tmp.search_smoker = row11.search_smoker ;
row6_tmp.search_height_from = row11.search_height_from ;
row6_tmp.search_height_to = row11.search_height_to ;
row6_tmp.search_weight_from = row11.search_weight_from ;
row6_tmp.search_weight_to = row11.search_weight_to ;
row6_tmp.search_look = row11.search_look ;
row6_tmp.search_has_children = row11.search_has_children ;
row6_tmp.search_attraction = row11.search_attraction ;
row6_tmp.search_hair_style = row11.search_hair_style ;
row6_tmp.search_hair_color = row11.search_hair_color ;
row6_tmp.search_eyes = row11.search_eyes ;
row6_tmp.search_living_style = row11.search_living_style ;
row6_tmp.search_nationality = row11.search_nationality ;
row6_tmp.search_ethnicity = row11.search_ethnicity ;
row6_tmp.search_live_with = row11.search_live_with ;
row6_tmp.search_pet = row11.search_pet ;
row6_tmp.search_studies = row11.search_studies ;
row6_tmp.search_language = row11.search_language ;
row6_tmp.search_job = row11.search_job ;
row6_tmp.search_income = row11.search_income ;
row6_tmp.search_hobbies = row11.search_hobbies ;
row6_tmp.search_leisure = row11.search_leisure ;
row6_tmp.search_music = row11.search_music ;
row6_tmp.search_movie = row11.search_movie ;
row6_tmp.search_sports = row11.search_sports ;
row6_tmp.search_temper = row11.search_temper ;
row6_tmp.search_food_habit = row11.search_food_habit ;
row6_tmp.search_romantic = row11.search_romantic ;
row6_tmp.search_marriage = row11.search_marriage ;
row6_tmp.search_religion_behaviour = row11.search_religion_behaviour ;
row6_tmp.search_religion = row11.search_religion ;
row6_tmp.music = row11.music ;
row6_tmp.leisure = row11.leisure ;
row6_tmp.hobbies = row11.hobbies ;
row6_tmp.movie = row11.movie ;
row6_tmp.sports = row11.sports ;
row6 = row6_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
	                        		    	Object exprKeyValue_row10__id = row6.id ;
	                        		    	if(exprKeyValue_row10__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_3 = true;
	                        		    	} else {
                        		    			row10HashKey.id = (int)(Integer) exprKeyValue_row10__id;
                        		    		}
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_3 || !tHash_Lookup_row10.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.id = '" + row10HashKey.id + "'");
								} // G 071
							

							row10Struct row10 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out2 = null;

if(!rejectedInnerJoin_tMap_3 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out2'
// # Filter conditions 
if( rejectedInnerJoin_tMap_3 ) {
out2_tmp.id = row6.id ;
out2_tmp.url = row6.url;
out2_tmp.name = row6.name;
out2_tmp.age = row6.age;
out2_tmp.birthday = row6.birthday;
out2_tmp.height = row6.height;
out2_tmp.weight = row6.weight;
out2_tmp.city = row6.city;
out2_tmp.region = row6.region;
out2_tmp.photo = row6.photo;
out2_tmp.imperfection = row6.imperfection;
out2_tmp.description = row6.description;
out2_tmp.nationality = row6.nationality;
out2_tmp.relation_type = row6.relation_type;
out2_tmp.temper = row6.temper;
out2_tmp.romantic = row6.romantic;
out2_tmp.marriage = row6.marriage;
out2_tmp.children_wish = row6.children_wish;
out2_tmp.body_shape = row6.body_shape;
out2_tmp.attraction = row6.attraction;
out2_tmp.living_style = row6.living_style;
out2_tmp.look = row6.look;
out2_tmp.ethnicity = row6.ethnicity;
out2_tmp.eyes = row6.eyes;
out2_tmp.hair_color = row6.hair_color;
out2_tmp.hair_style = row6.hair_style;
out2_tmp.marital_status = row6.marital_status;
out2_tmp.smoker = row6.smoker;
out2_tmp.has_children = row6.has_children;
out2_tmp.live_with = row6.live_with;
out2_tmp.job = row6.job;
out2_tmp.religion = row6.religion;
out2_tmp.religion_behaviour = row6.religion_behaviour;
out2_tmp.food_habit = row6.food_habit;
out2_tmp.pet = row6.pet;
out2_tmp.language = row6.language;
out2_tmp.studies = row6.studies;
out2_tmp.income = row6.income;
out2_tmp.search_age_from = row6.search_age_from;
out2_tmp.search_age_to = row6.search_age_to;
out2_tmp.search_body_shape = row6.search_body_shape;
out2_tmp.search_marital_status = row6.search_marital_status;
out2_tmp.search_children_wish = row6.search_children_wish;
out2_tmp.search_smoker = row6.search_smoker;
out2_tmp.search_height_from = row6.search_height_from;
out2_tmp.search_height_to = row6.search_height_to;
out2_tmp.search_weight_from = row6.search_weight_from;
out2_tmp.search_weight_to = row6.search_weight_to;
out2_tmp.search_look = row6.search_look;
out2_tmp.search_has_children = row6.search_has_children;
out2_tmp.search_attraction = row6.search_attraction;
out2_tmp.search_hair_style = row6.search_hair_style;
out2_tmp.search_hair_color = row6.search_hair_color;
out2_tmp.search_eyes = row6.search_eyes;
out2_tmp.search_living_style = row6.search_living_style;
out2_tmp.search_nationality = row6.search_nationality;
out2_tmp.search_ethnicity = row6.search_ethnicity;
out2_tmp.search_live_with = row6.search_live_with;
out2_tmp.search_pet = row6.search_pet;
out2_tmp.search_studies = row6.search_studies;
out2_tmp.search_language = row6.search_language;
out2_tmp.search_job = row6.search_job;
out2_tmp.search_income = row6.search_income;
out2_tmp.search_hobbies = row6.search_hobbies;
out2_tmp.search_leisure = row6.search_leisure;
out2_tmp.search_music = row6.search_music;
out2_tmp.search_movie = row6.search_movie;
out2_tmp.search_sports = row6.search_sports;
out2_tmp.search_temper = row6.search_temper;
out2_tmp.search_food_habit = row6.search_food_habit;
out2_tmp.search_romantic = row6.search_romantic;
out2_tmp.search_marriage = row6.search_marriage;
out2_tmp.search_religion_behaviour = row6.search_religion_behaviour;
out2_tmp.search_religion = row6.search_religion;
out2_tmp.music = row6.music;
out2_tmp.leisure = row6.leisure;
out2_tmp.hobbies = row6.hobbies;
out2_tmp.movie = row6.movie;
out2_tmp.sports = row6.sports;
out2 = out2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                            pstmt_tMysqlOutput_1.setInt(1, out2.id);

                            if(out2.url == null) {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(2, out2.url);
}

                            if(out2.name == null) {
pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(3, out2.name);
}

                            if(out2.age == null) {
pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(4, out2.age);
}

                            if(out2.birthday == null) {
pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(5, out2.birthday);
}

                            if(out2.height == null) {
pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(6, out2.height);
}

                            if(out2.weight == null) {
pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(7, out2.weight);
}

                            if(out2.city == null) {
pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(8, out2.city);
}

                            if(out2.region == null) {
pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(9, out2.region);
}

                            if(out2.photo == null) {
pstmt_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(10, out2.photo);
}

                            if(out2.imperfection == null) {
pstmt_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(11, out2.imperfection);
}

                            if(out2.description == null) {
pstmt_tMysqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(12, out2.description);
}

                            if(out2.nationality == null) {
pstmt_tMysqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(13, out2.nationality);
}

                            if(out2.relation_type == null) {
pstmt_tMysqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(14, out2.relation_type);
}

                            if(out2.temper == null) {
pstmt_tMysqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(15, out2.temper);
}

                            if(out2.romantic == null) {
pstmt_tMysqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(16, out2.romantic);
}

                            if(out2.marriage == null) {
pstmt_tMysqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(17, out2.marriage);
}

                            if(out2.children_wish == null) {
pstmt_tMysqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(18, out2.children_wish);
}

                            if(out2.body_shape == null) {
pstmt_tMysqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(19, out2.body_shape);
}

                            if(out2.attraction == null) {
pstmt_tMysqlOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(20, out2.attraction);
}

                            if(out2.living_style == null) {
pstmt_tMysqlOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(21, out2.living_style);
}

                            if(out2.look == null) {
pstmt_tMysqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(22, out2.look);
}

                            if(out2.ethnicity == null) {
pstmt_tMysqlOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(23, out2.ethnicity);
}

                            if(out2.eyes == null) {
pstmt_tMysqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(24, out2.eyes);
}

                            if(out2.hair_color == null) {
pstmt_tMysqlOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(25, out2.hair_color);
}

                            if(out2.hair_style == null) {
pstmt_tMysqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(26, out2.hair_style);
}

                            if(out2.marital_status == null) {
pstmt_tMysqlOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(27, out2.marital_status);
}

                            if(out2.smoker == null) {
pstmt_tMysqlOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(28, out2.smoker);
}

                            if(out2.has_children == null) {
pstmt_tMysqlOutput_1.setNull(29, java.sql.Types.BOOLEAN);
} else {pstmt_tMysqlOutput_1.setBoolean(29, out2.has_children);
}

                            if(out2.live_with == null) {
pstmt_tMysqlOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(30, out2.live_with);
}

                            if(out2.job == null) {
pstmt_tMysqlOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(31, out2.job);
}

                            if(out2.religion == null) {
pstmt_tMysqlOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(32, out2.religion);
}

                            if(out2.religion_behaviour == null) {
pstmt_tMysqlOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(33, out2.religion_behaviour);
}

                            if(out2.food_habit == null) {
pstmt_tMysqlOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(34, out2.food_habit);
}

                            if(out2.pet == null) {
pstmt_tMysqlOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(35, out2.pet);
}

                            if(out2.language == null) {
pstmt_tMysqlOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(36, out2.language);
}

                            if(out2.studies == null) {
pstmt_tMysqlOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(37, out2.studies);
}

                            if(out2.income == null) {
pstmt_tMysqlOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(38, out2.income);
}

                            if(out2.search_age_from == null) {
pstmt_tMysqlOutput_1.setNull(39, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(39, out2.search_age_from);
}

                            if(out2.search_age_to == null) {
pstmt_tMysqlOutput_1.setNull(40, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(40, out2.search_age_to);
}

                            if(out2.search_body_shape == null) {
pstmt_tMysqlOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(41, out2.search_body_shape);
}

                            if(out2.search_marital_status == null) {
pstmt_tMysqlOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(42, out2.search_marital_status);
}

                            if(out2.search_children_wish == null) {
pstmt_tMysqlOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(43, out2.search_children_wish);
}

                            if(out2.search_smoker == null) {
pstmt_tMysqlOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(44, out2.search_smoker);
}

                            if(out2.search_height_from == null) {
pstmt_tMysqlOutput_1.setNull(45, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(45, out2.search_height_from);
}

                            if(out2.search_height_to == null) {
pstmt_tMysqlOutput_1.setNull(46, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(46, out2.search_height_to);
}

                            if(out2.search_weight_from == null) {
pstmt_tMysqlOutput_1.setNull(47, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(47, out2.search_weight_from);
}

                            if(out2.search_weight_to == null) {
pstmt_tMysqlOutput_1.setNull(48, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(48, out2.search_weight_to);
}

                            if(out2.search_look == null) {
pstmt_tMysqlOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(49, out2.search_look);
}

                            if(out2.search_has_children == null) {
pstmt_tMysqlOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(50, out2.search_has_children);
}

                            if(out2.search_attraction == null) {
pstmt_tMysqlOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(51, out2.search_attraction);
}

                            if(out2.search_hair_style == null) {
pstmt_tMysqlOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(52, out2.search_hair_style);
}

                            if(out2.search_hair_color == null) {
pstmt_tMysqlOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(53, out2.search_hair_color);
}

                            if(out2.search_eyes == null) {
pstmt_tMysqlOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(54, out2.search_eyes);
}

                            if(out2.search_living_style == null) {
pstmt_tMysqlOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(55, out2.search_living_style);
}

                            if(out2.search_nationality == null) {
pstmt_tMysqlOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(56, out2.search_nationality);
}

                            if(out2.search_ethnicity == null) {
pstmt_tMysqlOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(57, out2.search_ethnicity);
}

                            if(out2.search_live_with == null) {
pstmt_tMysqlOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(58, out2.search_live_with);
}

                            if(out2.search_pet == null) {
pstmt_tMysqlOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(59, out2.search_pet);
}

                            if(out2.search_studies == null) {
pstmt_tMysqlOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(60, out2.search_studies);
}

                            if(out2.search_language == null) {
pstmt_tMysqlOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(61, out2.search_language);
}

                            if(out2.search_job == null) {
pstmt_tMysqlOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(62, out2.search_job);
}

                            if(out2.search_income == null) {
pstmt_tMysqlOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(63, out2.search_income);
}

                            if(out2.search_hobbies == null) {
pstmt_tMysqlOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(64, out2.search_hobbies);
}

                            if(out2.search_leisure == null) {
pstmt_tMysqlOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(65, out2.search_leisure);
}

                            if(out2.search_music == null) {
pstmt_tMysqlOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(66, out2.search_music);
}

                            if(out2.search_movie == null) {
pstmt_tMysqlOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(67, out2.search_movie);
}

                            if(out2.search_sports == null) {
pstmt_tMysqlOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(68, out2.search_sports);
}

                            if(out2.search_temper == null) {
pstmt_tMysqlOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(69, out2.search_temper);
}

                            if(out2.search_food_habit == null) {
pstmt_tMysqlOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(70, out2.search_food_habit);
}

                            if(out2.search_romantic == null) {
pstmt_tMysqlOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(71, out2.search_romantic);
}

                            if(out2.search_marriage == null) {
pstmt_tMysqlOutput_1.setNull(72, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(72, out2.search_marriage);
}

                            if(out2.search_religion_behaviour == null) {
pstmt_tMysqlOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(73, out2.search_religion_behaviour);
}

                            if(out2.search_religion == null) {
pstmt_tMysqlOutput_1.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(74, out2.search_religion);
}

                            if(out2.music == null) {
pstmt_tMysqlOutput_1.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(75, out2.music);
}

                            if(out2.leisure == null) {
pstmt_tMysqlOutput_1.setNull(76, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(76, out2.leisure);
}

                            if(out2.hobbies == null) {
pstmt_tMysqlOutput_1.setNull(77, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(77, out2.hobbies);
}

                            if(out2.movie == null) {
pstmt_tMysqlOutput_1.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(78, out2.movie);
}

                            if(out2.sports == null) {
pstmt_tMysqlOutput_1.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(79, out2.sports);
}

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }

 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */

} // End of branch "out2"





} // End of branch "row6"








} // End of branch "out3"




// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

			//out4
			//out4


			
				if(execStat){
					runStat.updateStatOnConnection("out4"+iterateId,1, 1);
				} 
			

		



    
		out4Struct oneRow_tHashOutput_3 = new out4Struct();
				
					oneRow_tHashOutput_3.id = out4.id;
					oneRow_tHashOutput_3.file_name = out4.file_name;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;
 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */

} // End of branch "out4"





} // End of branch "out_contenu"







	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    		
    		mf_tHashInput_2.clearCache("tHashFile_b_meetic_" + pid +"_tHashOutput_2");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_b_meetic_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out_contenu"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }


	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());




/**
 * [tMysqlOutput_1 end ] stop
 */













	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tFileList_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */













	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class OnSubjobOkStructtIterateToFlow_3 implements routines.system.IPersistableRow<OnSubjobOkStructtIterateToFlow_3> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_name = readString(dis);
					
					this.file_path = readString(dis);
					
					this.file_extension = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_name="+file_name);
		sb.append(",file_path="+file_path);
		sb.append(",file_extension="+file_extension);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnSubjobOkStructtIterateToFlow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileList_3Struct implements routines.system.IPersistableRow<after_tFileList_3Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileList_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tHashInput_4Process(globalMap);

		


	
	/**
	 * [tFileList_3 begin ] start
	 */

				
			int NB_ITERATE_tIterateToFlow_3_ITFO = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_3", false);
		start_Hash.put("tFileList_3", System.currentTimeMillis());
		
	
	currentComponent="tFileList_3";

	
		int tos_count_tFileList_3 = 0;
		
    	class BytesLimit65535_tFileList_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_3().limitLog4jByte();
	
 
     
    
  String directory_tFileList_3 = context.path_tmp;
  final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_3.add("*");  
  for (final String filemask_tFileList_3 : maskList_tFileList_3) {
	String filemask_compile_tFileList_3 = filemask_tFileList_3;
	
		filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_3.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern.compile(filemask_compile_tFileList_3);
	patternList_tFileList_3.add(fileNamePattern_tFileList_3);
  }
  int NB_FILEtFileList_3 = 0;

  final boolean case_sensitive_tFileList_3 = true;
    final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
	java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);
     
		file_tFileList_3.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_3 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
          	if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()){
					if(!filePath_tFileList_3.contains(file.getAbsolutePath())) {
			          list_tFileList_3.add(file);
			          filePath_tFileList_3.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_3);
    
    for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++){
      java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
      String fileName_tFileList_3 = files_tFileList_3.getName();
      
      String currentFileName_tFileList_3 = files_tFileList_3.getName(); 
      String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
      String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
      String currentFileExtension_tFileList_3 = null;
      
      if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()){
        currentFileExtension_tFileList_3 = files_tFileList_3.getName().substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_3 = "";
      }
      
      NB_FILEtFileList_3 ++;
      globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
      globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
      
 



/**
 * [tFileList_3 begin ] stop
 */
	
	/**
	 * [tFileList_3 main ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 


	tos_count_tFileList_3++;

/**
 * [tFileList_3 main ] stop
 */
	NB_ITERATE_tIterateToFlow_3_ITFO++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tIterateToFlow_3_ITFO);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tIterateToFlow_3_ITFO begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_3_ITFO", false);
		start_Hash.put("tIterateToFlow_3_ITFO", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_3";
	
	currentComponent="tIterateToFlow_3_ITFO";

	
		int tos_count_tIterateToFlow_3_ITFO = 0;
		
    	class BytesLimit65535_tIterateToFlow_3_ITFO{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tIterateToFlow_3_ITFO().limitLog4jByte();

OnSubjobOkStructtIterateToFlow_3 struct_tIterateToFlow_3_ITFO = new OnSubjobOkStructtIterateToFlow_3();
struct_tIterateToFlow_3_ITFO.file_name  = ((String)globalMap.get("tFileList_3_CURRENT_FILE"));
struct_tIterateToFlow_3_ITFO.file_path  = ((String)globalMap.get("tFileList_3_CURRENT_FILEPATH"));
struct_tIterateToFlow_3_ITFO.file_extension  = ((String)globalMap.get("tFileList_3_CURRENT_FILEEXTENSION"));

    if(globalMap.get("tIterateToFlow_3") != null){
    	java.util.List<OnSubjobOkStructtIterateToFlow_3> list_tIterateToFlow_3_ITFO = (java.util.List<OnSubjobOkStructtIterateToFlow_3>)globalMap.get("tIterateToFlow_3"); 
    	list_tIterateToFlow_3_ITFO.add(struct_tIterateToFlow_3_ITFO);
    }else{
    	java.util.List<OnSubjobOkStructtIterateToFlow_3> list_tIterateToFlow_3_ITFO = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_3>();
    	list_tIterateToFlow_3_ITFO.add(struct_tIterateToFlow_3_ITFO);
    	globalMap.put("tIterateToFlow_3",list_tIterateToFlow_3_ITFO);
    }
 



/**
 * [tIterateToFlow_3_ITFO begin ] stop
 */
	
	/**
	 * [tIterateToFlow_3_ITFO main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_3";
	
	currentComponent="tIterateToFlow_3_ITFO";

	

 


	tos_count_tIterateToFlow_3_ITFO++;

/**
 * [tIterateToFlow_3_ITFO main ] stop
 */
	
	/**
	 * [tIterateToFlow_3_ITFO end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_3";
	
	currentComponent="tIterateToFlow_3_ITFO";

	

 

ok_Hash.put("tIterateToFlow_3_ITFO", true);
end_Hash.put("tIterateToFlow_3_ITFO", System.currentTimeMillis());




/**
 * [tIterateToFlow_3_ITFO end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tIterateToFlow_3_ITFO);
						}				
					




	
	/**
	 * [tFileList_3 end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

  
    }
  globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
  

  
 

 

ok_Hash.put("tFileList_3", true);
end_Hash.put("tFileList_3", System.currentTimeMillis());




/**
 * [tFileList_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk", 0, "ok");
								} 
							
							tIterateToFlow_3_AIProcess(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tFileList_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_3 finally ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 finally ] stop
 */

	
	/**
	 * [tIterateToFlow_3_ITFO finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_3";
	
	currentComponent="tIterateToFlow_3_ITFO";

	

 



/**
 * [tIterateToFlow_3_ITFO finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_4 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_4", false);
		start_Hash.put("tFileList_4", System.currentTimeMillis());
		
	
	currentComponent="tFileList_4";

	
		int tos_count_tFileList_4 = 0;
		
    	class BytesLimit65535_tFileList_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_4().limitLog4jByte();
	
 
     
    
  String directory_tFileList_4 = context.path;
  final java.util.List<String> maskList_tFileList_4 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_4 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_4.add("*");  
  for (final String filemask_tFileList_4 : maskList_tFileList_4) {
	String filemask_compile_tFileList_4 = filemask_tFileList_4;
	
		filemask_compile_tFileList_4 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_4.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_4 = java.util.regex.Pattern.compile(filemask_compile_tFileList_4);
	patternList_tFileList_4.add(fileNamePattern_tFileList_4);
  }
  int NB_FILEtFileList_4 = 0;

  final boolean case_sensitive_tFileList_4 = true;
    final java.util.List<java.io.File> list_tFileList_4 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_4 = new java.util.HashSet<String>();
	java.io.File file_tFileList_4 = new java.io.File(directory_tFileList_4);
     
		file_tFileList_4.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_4 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_4 : patternList_tFileList_4) {
          	if (fileNamePattern_tFileList_4.matcher(fileName_tFileList_4).matches()){
					if(!filePath_tFileList_4.contains(file.getAbsolutePath())) {
			          list_tFileList_4.add(file);
			          filePath_tFileList_4.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_4);
    
    for (int i_tFileList_4 = 0; i_tFileList_4 < list_tFileList_4.size(); i_tFileList_4++){
      java.io.File files_tFileList_4 = list_tFileList_4.get(i_tFileList_4);
      String fileName_tFileList_4 = files_tFileList_4.getName();
      
      String currentFileName_tFileList_4 = files_tFileList_4.getName(); 
      String currentFilePath_tFileList_4 = files_tFileList_4.getAbsolutePath();
      String currentFileDirectory_tFileList_4 = files_tFileList_4.getParent();
      String currentFileExtension_tFileList_4 = null;
      
      if (files_tFileList_4.getName().contains(".") && files_tFileList_4.isFile()){
        currentFileExtension_tFileList_4 = files_tFileList_4.getName().substring(files_tFileList_4.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_4 = "";
      }
      
      NB_FILEtFileList_4 ++;
      globalMap.put("tFileList_4_CURRENT_FILE", currentFileName_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEPATH", currentFilePath_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_4);
      globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
      
 



/**
 * [tFileList_4 begin ] stop
 */
	
	/**
	 * [tFileList_4 main ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 


	tos_count_tFileList_4++;

/**
 * [tFileList_4 main ] stop
 */
	NB_ITERATE_tFileDelete_2++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate6", 1, "exec" + NB_ITERATE_tFileDelete_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		
    	class BytesLimit65535_tFileDelete_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_2().limitLog4jByte();

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(((String)globalMap.get("tFileList_4_CURRENT_FILEPATH")));
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",((String)globalMap.get("tFileList_4_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate6", 2, "exec" + NB_ITERATE_tFileDelete_2);
						}				
					




	
	/**
	 * [tFileList_4 end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

  
    }
  globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
  

  
 

 

ok_Hash.put("tFileList_4", true);
end_Hash.put("tFileList_4", System.currentTimeMillis());




/**
 * [tFileList_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tFileList_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_4 finally ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 finally ] stop
 */

	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_4_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_5 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_5", false);
		start_Hash.put("tFileList_5", System.currentTimeMillis());
		
	
	currentComponent="tFileList_5";

	
		int tos_count_tFileList_5 = 0;
		
    	class BytesLimit65535_tFileList_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_5().limitLog4jByte();
	
 
     
    
  String directory_tFileList_5 = context.path;
  final java.util.List<String> maskList_tFileList_5 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_5 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_5.add("*");  
  for (final String filemask_tFileList_5 : maskList_tFileList_5) {
	String filemask_compile_tFileList_5 = filemask_tFileList_5;
	
		filemask_compile_tFileList_5 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_5.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_5 = java.util.regex.Pattern.compile(filemask_compile_tFileList_5);
	patternList_tFileList_5.add(fileNamePattern_tFileList_5);
  }
  int NB_FILEtFileList_5 = 0;

  final boolean case_sensitive_tFileList_5 = true;
    final java.util.List<java.io.File> list_tFileList_5 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_5 = new java.util.HashSet<String>();
	java.io.File file_tFileList_5 = new java.io.File(directory_tFileList_5);
     
		file_tFileList_5.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (file.isDirectory()) {
                	
    	String fileName_tFileList_5 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_5 : patternList_tFileList_5) {
          	if (fileNamePattern_tFileList_5.matcher(fileName_tFileList_5).matches()){
					if(!filePath_tFileList_5.contains(file.getAbsolutePath())) {
			          list_tFileList_5.add(file);
			          filePath_tFileList_5.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_5);
    
    for (int i_tFileList_5 = 0; i_tFileList_5 < list_tFileList_5.size(); i_tFileList_5++){
      java.io.File files_tFileList_5 = list_tFileList_5.get(i_tFileList_5);
      String fileName_tFileList_5 = files_tFileList_5.getName();
      
      String currentFileName_tFileList_5 = files_tFileList_5.getName(); 
      String currentFilePath_tFileList_5 = files_tFileList_5.getAbsolutePath();
      String currentFileDirectory_tFileList_5 = files_tFileList_5.getParent();
      String currentFileExtension_tFileList_5 = null;
      
      if (files_tFileList_5.getName().contains(".") && files_tFileList_5.isFile()){
        currentFileExtension_tFileList_5 = files_tFileList_5.getName().substring(files_tFileList_5.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_5 = "";
      }
      
      NB_FILEtFileList_5 ++;
      globalMap.put("tFileList_5_CURRENT_FILE", currentFileName_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEPATH", currentFilePath_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_5);
      globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
      
 



/**
 * [tFileList_5 begin ] stop
 */
	
	/**
	 * [tFileList_5 main ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 


	tos_count_tFileList_5++;

/**
 * [tFileList_5 main ] stop
 */
	NB_ITERATE_tFileDelete_3++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate7", 1, "exec" + NB_ITERATE_tFileDelete_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_3", false);
		start_Hash.put("tFileDelete_3", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_3";

	
		int tos_count_tFileDelete_3 = 0;
		
    	class BytesLimit65535_tFileDelete_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_3().limitLog4jByte();

 



/**
 * [tFileDelete_3 begin ] stop
 */
	
	/**
	 * [tFileDelete_3 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 

class DeleteFoldertFileDelete_3{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}

	java.io.File filetFileDelete_3 = new java.io.File(((String)globalMap.get("tFileList_5_CURRENT_FILEPATH")));

	if(filetFileDelete_3.exists()&& filetFileDelete_3.isDirectory()){
		DeleteFoldertFileDelete_3 dftFileDelete_3 = new DeleteFoldertFileDelete_3();
		if(dftFileDelete_3.delete(filetFileDelete_3)){
			globalMap.put("tFileDelete_3_CURRENT_STATUS", "Path deleted.");
		}else{
			globalMap.put("tFileDelete_3_CURRENT_STATUS", "No path deleted.");
		}
	}else{
		globalMap.put("tFileDelete_3_CURRENT_STATUS", "Path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_3_DELETE_PATH",((String)globalMap.get("tFileList_5_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_3++;

/**
 * [tFileDelete_3 main ] stop
 */
	
	/**
	 * [tFileDelete_3 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 

ok_Hash.put("tFileDelete_3", true);
end_Hash.put("tFileDelete_3", System.currentTimeMillis());




/**
 * [tFileDelete_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate7", 2, "exec" + NB_ITERATE_tFileDelete_3);
						}				
					




	
	/**
	 * [tFileList_5 end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

  
    }
  globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
  

  
 

 

ok_Hash.put("tFileList_5", true);
end_Hash.put("tFileList_5", System.currentTimeMillis());




/**
 * [tFileList_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_5 finally ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 finally ] stop
 */

	
	/**
	 * [tFileDelete_3 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_5_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		
    	class BytesLimit65535_tFileDelete_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_1().limitLog4jByte();

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}

	java.io.File filetFileDelete_1 = new java.io.File(((String)globalMap.get("tFileExist_1_FILENAME")));

	if(filetFileDelete_1.exists()&& filetFileDelete_1.isDirectory()){
		DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
		if(dftFileDelete_1.delete(filetFileDelete_1)){
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No path deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_1_DELETE_PATH",((String)globalMap.get("tFileExist_1_FILENAME")));
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.id = this.id;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.id = this.id;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row10 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row10().limitLog4jByte();

			   		// connection name:row10
			   		// source node:tMysqlInput_1 - inputs:(after_tHashInput_2) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_3 - inputs:(row6,row10) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
		        conn_tMysqlInput_1 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");
				
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT \n  `b_girls`.`id`\nFROM `b_girls`";
			

                       globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);

		    java.sql.ResultSet rs_tMysqlInput_1 = null;
		try{
		    rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row10.id = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(1) != null) {
                row10.id = rs_tMysqlInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.id = row10.id;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */



	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

tHash_Lookup_row10.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.file_name == null) ? 0 : this.file_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.file_name == null) {
							if (other.file_name != null)
								return false;
						
						} else if (!this.file_name.equals(other.file_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.id = this.id;
	            other.file_name = this.file_name;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.file_name = this.file_name;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",file_name="+file_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.file_name, other.file_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row13 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row13().limitLog4jByte();

			   		// connection name:row13
			   		// source node:tHashInput_4 - inputs:(after_tFileList_3) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_4 - inputs:(row12,row13) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";

	
		int tos_count_tHashInput_4 = 0;
		
    	class BytesLimit65535_tHashInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_4().limitLog4jByte();


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out4Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_b_meetic_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out4Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    out4Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row13.id = next_tHashInput_4.id;
	row13.file_name = next_tHashInput_4.file_name;
 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.id = row13.id;
				
				row13_HashRow.file_name = row13.file_name;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */



	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_b_meetic_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMysqlConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlConnection_1", false);
		start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlConnection_1";

	
		int tos_count_tMysqlConnection_1 = 0;
		
    	class BytesLimit65535_tMysqlConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlConnection_1().limitLog4jByte();
	

	
		String properties_tMysqlConnection_1 = "noDatetimeStringSync=true";
		if (properties_tMysqlConnection_1 == null || properties_tMysqlConnection_1.trim().length() == 0) {
			properties_tMysqlConnection_1 += "rewriteBatchedStatements=true";
		}else if (properties_tMysqlConnection_1 != null && !properties_tMysqlConnection_1.contains("rewriteBatchedStatements")) {
			properties_tMysqlConnection_1 += "&rewriteBatchedStatements=true";
		}
		
		String url_tMysqlConnection_1 = "jdbc:mariadb://" + "localhost" + ":" + "3306" + "/" + "my_meetic" + "?" + properties_tMysqlConnection_1;

	String dbUser_tMysqlConnection_1 = "root";
	
	
		 
	final String decryptedPassword_tMysqlConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");
		String dbPwd_tMysqlConnection_1 = decryptedPassword_tMysqlConnection_1;
	

	java.sql.Connection conn_tMysqlConnection_1 = null;
	
		
			String driverClass_tMysqlConnection_1 = "org.mariadb.jdbc.Driver";
			java.lang.Class.forName(driverClass_tMysqlConnection_1);
		
		conn_tMysqlConnection_1 = java.sql.DriverManager.getConnection(url_tMysqlConnection_1,dbUser_tMysqlConnection_1,dbPwd_tMysqlConnection_1);

		globalMap.put("conn_tMysqlConnection_1", conn_tMysqlConnection_1);
	if (null != conn_tMysqlConnection_1) {
		
			conn_tMysqlConnection_1.setAutoCommit(true);
	}

	globalMap.put("conn_tMysqlConnection_1",conn_tMysqlConnection_1);

	globalMap.put("db_tMysqlConnection_1","my_meetic");
 



/**
 * [tMysqlConnection_1 begin ] stop
 */
	
	/**
	 * [tMysqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlConnection_1";

	

 


	tos_count_tMysqlConnection_1++;

/**
 * [tMysqlConnection_1 main ] stop
 */
	
	/**
	 * [tMysqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlConnection_1";

	

 

ok_Hash.put("tMysqlConnection_1", true);
end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());




/**
 * [tMysqlConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlConnection_1";

	

 



/**
 * [tMysqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tMysqlClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tMysqlClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tMysqlClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlClose_1", false);
		start_Hash.put("tMysqlClose_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlClose_1";

	
		int tos_count_tMysqlClose_1 = 0;
		
    	class BytesLimit65535_tMysqlClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlClose_1().limitLog4jByte();

 



/**
 * [tMysqlClose_1 begin ] stop
 */
	
	/**
	 * [tMysqlClose_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlClose_1";

	

	java.sql.Connection conn_tMysqlClose_1 = (java.sql.Connection)globalMap.get("conn_tMysqlConnection_1");

	if(conn_tMysqlClose_1 != null && !conn_tMysqlClose_1.isClosed())
	{
		
			conn_tMysqlClose_1.close();
			
	}

 


	tos_count_tMysqlClose_1++;

/**
 * [tMysqlClose_1 main ] stop
 */
	
	/**
	 * [tMysqlClose_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlClose_1";

	

 

ok_Hash.put("tMysqlClose_1", true);
end_Hash.put("tMysqlClose_1", System.currentTimeMillis());




/**
 * [tMysqlClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlClose_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlClose_1";

	

 



/**
 * [tMysqlClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_path = readString(dis);
					
					this.file_name = readString(dis);
					
					this.file_extension = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_path="+file_path);
		sb.append(",file_name="+file_name);
		sb.append(",file_extension="+file_extension);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tIterateToFlow_1_AIProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_1 = 0;
		
    	class BytesLimit65535_tHashOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashOutput_1().limitLog4jByte();



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_b_meetic_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;
 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tIterateToFlow_1_AI begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_1_AI", false);
		start_Hash.put("tIterateToFlow_1_AI", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	
		int tos_count_tIterateToFlow_1_AI = 0;
		
    	class BytesLimit65535_tIterateToFlow_1_AI{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tIterateToFlow_1_AI().limitLog4jByte();

        
        int nb_line_tIterateToFlow_1_AI = 0;
        java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_AI = (java.util.List<OnSubjobOkStructtIterateToFlow_1>)globalMap.get("tIterateToFlow_1");
        if(list_tIterateToFlow_1_AI == null) {
            list_tIterateToFlow_1_AI = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
        }        
        for(OnSubjobOkStructtIterateToFlow_1 row_tIterateToFlow_1_AI : list_tIterateToFlow_1_AI){
        					
    						row1.file_path = row_tIterateToFlow_1_AI.file_path;
    											
    						row1.file_name = row_tIterateToFlow_1_AI.file_name;
    											
    						row1.file_extension = row_tIterateToFlow_1_AI.file_extension;
    						

 



/**
 * [tIterateToFlow_1_AI begin ] stop
 */
	
	/**
	 * [tIterateToFlow_1_AI main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	

 


	tos_count_tIterateToFlow_1_AI++;

/**
 * [tIterateToFlow_1_AI main ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		



    
		row1Struct oneRow_tHashOutput_1 = new row1Struct();
				
					oneRow_tHashOutput_1.file_path = row1.file_path;
					oneRow_tHashOutput_1.file_name = row1.file_name;
					oneRow_tHashOutput_1.file_extension = row1.file_extension;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;
 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */



	
	/**
	 * [tIterateToFlow_1_AI end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	
	nb_line_tIterateToFlow_1_AI++;
}
globalMap.put("tIterateToFlow_1_AI_NB_LINE",nb_line_tIterateToFlow_1_AI);
 

ok_Hash.put("tIterateToFlow_1_AI", true);
end_Hash.put("tIterateToFlow_1_AI", System.currentTimeMillis());




/**
 * [tIterateToFlow_1_AI end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tIterateToFlow_1_AI"
							globalMap.remove("tIterateToFlow_1");
						
				try{
					
	
	/**
	 * [tIterateToFlow_1_AI finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	

 



/**
 * [tIterateToFlow_1_AI finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_path = readString(dis);
					
					this.file_name = readString(dis);
					
					this.file_extension = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_path="+file_path);
		sb.append(",file_name="+file_name);
		sb.append(",file_extension="+file_extension);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tIterateToFlow_2_AIProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tIterateToFlow_2_AI_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_4 = 0;
		
    	class BytesLimit65535_tHashOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashOutput_4().limitLog4jByte();



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_b_meetic_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;
 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tIterateToFlow_2_AI begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_2_AI", false);
		start_Hash.put("tIterateToFlow_2_AI", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_2";
	
	currentComponent="tIterateToFlow_2_AI";

	
		int tos_count_tIterateToFlow_2_AI = 0;
		
    	class BytesLimit65535_tIterateToFlow_2_AI{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tIterateToFlow_2_AI().limitLog4jByte();

        
        int nb_line_tIterateToFlow_2_AI = 0;
        java.util.List<OnSubjobOkStructtIterateToFlow_2> list_tIterateToFlow_2_AI = (java.util.List<OnSubjobOkStructtIterateToFlow_2>)globalMap.get("tIterateToFlow_2");
        if(list_tIterateToFlow_2_AI == null) {
            list_tIterateToFlow_2_AI = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_2>();
        }        
        for(OnSubjobOkStructtIterateToFlow_2 row_tIterateToFlow_2_AI : list_tIterateToFlow_2_AI){
        					
    						row7.file_path = row_tIterateToFlow_2_AI.file_path;
    											
    						row7.file_name = row_tIterateToFlow_2_AI.file_name;
    											
    						row7.file_extension = row_tIterateToFlow_2_AI.file_extension;
    						

 



/**
 * [tIterateToFlow_2_AI begin ] stop
 */
	
	/**
	 * [tIterateToFlow_2_AI main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_2";
	
	currentComponent="tIterateToFlow_2_AI";

	

 


	tos_count_tIterateToFlow_2_AI++;

/**
 * [tIterateToFlow_2_AI main ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		



    
		row7Struct oneRow_tHashOutput_4 = new row7Struct();
				
					oneRow_tHashOutput_4.file_path = row7.file_path;
					oneRow_tHashOutput_4.file_name = row7.file_name;
					oneRow_tHashOutput_4.file_extension = row7.file_extension;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;
 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */



	
	/**
	 * [tIterateToFlow_2_AI end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_2";
	
	currentComponent="tIterateToFlow_2_AI";

	
	nb_line_tIterateToFlow_2_AI++;
}
globalMap.put("tIterateToFlow_2_AI_NB_LINE",nb_line_tIterateToFlow_2_AI);
 

ok_Hash.put("tIterateToFlow_2_AI", true);
end_Hash.put("tIterateToFlow_2_AI", System.currentTimeMillis());




/**
 * [tIterateToFlow_2_AI end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tIterateToFlow_2_AI"
							globalMap.remove("tIterateToFlow_2");
						
				try{
					
	
	/**
	 * [tIterateToFlow_2_AI finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_2";
	
	currentComponent="tIterateToFlow_2_AI";

	

 



/**
 * [tIterateToFlow_2_AI finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tIterateToFlow_2_AI_SUBPROCESS_STATE", 1);
	}
	


public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				
			    public String id;

				public String getId () {
					return this.id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_name = readString(dis);
					
					this.file_path = readString(dis);
					
					this.file_extension = readString(dis);
					
					this.id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
					// String
				
						writeString(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_name="+file_name);
		sb.append(",file_path="+file_path);
		sb.append(",file_extension="+file_extension);
		sb.append(",id="+id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];
    static byte[] commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[0];

	
			    public String file_name;

				public String getFile_name () {
					return this.file_name;
				}
				
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String file_extension;

				public String getFile_extension () {
					return this.file_extension;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length) {
				if(length < 1024 && commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic.length == 0) {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[1024];
				} else {
   					commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length);
			strReturn = new String(commonByteArray_TALEND_SOCIAL_NETWORK_b_meetic, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TALEND_SOCIAL_NETWORK_b_meetic) {

        	try {

        		int length = 0;
		
					this.file_name = readString(dis);
					
					this.file_path = readString(dis);
					
					this.file_extension = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_name,dos);
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.file_extension,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("file_name="+file_name);
		sb.append(",file_path="+file_path);
		sb.append(",file_extension="+file_extension);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tIterateToFlow_3_AIProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tIterateToFlow_3_AI_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
out5Struct out5 = new out5Struct();





	
	/**
	 * [tFlowToIterate_2 begin ] start
	 */

				
			int NB_ITERATE_tFileCopy_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_2", false);
		start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFlowToIterate_2 = 0;
		
    	class BytesLimit65535_tFlowToIterate_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFlowToIterate_2().limitLog4jByte();

int nb_line_tFlowToIterate_2 = 0;
int counter_tFlowToIterate_2 = 0;

 



/**
 * [tFlowToIterate_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tIterateToFlow_3_AI begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_3_AI", false);
		start_Hash.put("tIterateToFlow_3_AI", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_3";
	
	currentComponent="tIterateToFlow_3_AI";

	
		int tos_count_tIterateToFlow_3_AI = 0;
		
    	class BytesLimit65535_tIterateToFlow_3_AI{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tIterateToFlow_3_AI().limitLog4jByte();

        
        int nb_line_tIterateToFlow_3_AI = 0;
        java.util.List<OnSubjobOkStructtIterateToFlow_3> list_tIterateToFlow_3_AI = (java.util.List<OnSubjobOkStructtIterateToFlow_3>)globalMap.get("tIterateToFlow_3");
        if(list_tIterateToFlow_3_AI == null) {
            list_tIterateToFlow_3_AI = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_3>();
        }        
        for(OnSubjobOkStructtIterateToFlow_3 row_tIterateToFlow_3_AI : list_tIterateToFlow_3_AI){
        					
    						row12.file_name = row_tIterateToFlow_3_AI.file_name;
    											
    						row12.file_path = row_tIterateToFlow_3_AI.file_path;
    											
    						row12.file_extension = row_tIterateToFlow_3_AI.file_extension;
    						

 



/**
 * [tIterateToFlow_3_AI begin ] stop
 */
	
	/**
	 * [tIterateToFlow_3_AI main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_3";
	
	currentComponent="tIterateToFlow_3_AI";

	

 


	tos_count_tIterateToFlow_3_AI++;

/**
 * [tIterateToFlow_3_AI main ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		row13HashKey.file_name = row12.file_path ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.file_name = '" + row13HashKey.file_name + "'");
								} // G 071
							

							row13Struct row13 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out5 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'out5'
out5_tmp.file_name = row12.file_name ;
out5_tmp.file_path = row12.file_path ;
out5_tmp.file_extension = row12.file_extension ;
out5_tmp.id = String.valueOf(row13.id ) ;
out5 = out5_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";

	

			//out5
			//out5


			
				if(execStat){
					runStat.updateStatOnConnection("out5"+iterateId,1, 1);
				} 
			

		


    	            
            globalMap.put("out5.file_name", out5.file_name);
    	            
            globalMap.put("out5.file_path", out5.file_path);
    	            
            globalMap.put("out5.file_extension", out5.file_extension);
    	            
            globalMap.put("out5.id", out5.id);
    	
 
	   nb_line_tFlowToIterate_2++;  
       counter_tFlowToIterate_2++;
       globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);
 


	tos_count_tFlowToIterate_2++;

/**
 * [tFlowToIterate_2 main ] stop
 */
	NB_ITERATE_tFileCopy_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate8", 1, "exec" + NB_ITERATE_tFileCopy_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileCopy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_1", false);
		start_Hash.put("tFileCopy_1", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_1";

	
		int tos_count_tFileCopy_1 = 0;
		
    	class BytesLimit65535_tFileCopy_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileCopy_1().limitLog4jByte();

 



/**
 * [tFileCopy_1 begin ] stop
 */
	
	/**
	 * [tFileCopy_1 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 


        String srcFileName_tFileCopy_1 = ((String)globalMap.get("row8.file_path"));

		java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
		}
        String desDirName_tFileCopy_1 = context.path_archive;

		String desFileName_tFileCopy_1 =  ((String)globalMap.get("out5.id"))+"."+((String)globalMap.get("row8.file_extension")) ;

		if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())){
			desFileName_tFileCopy_1 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

		if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())  ) {
				java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1.getParentFile();

				if (parentFile_tFileCopy_1 != null && !parentFile_tFileCopy_1.exists()) {
					parentFile_tFileCopy_1.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(), true);
				} catch (Exception e) {
						System.err.println("tFileCopy_1 " + e.getMessage());
				}
				java.io.File isRemoved_tFileCopy_1 = new java.io.File(((String)globalMap.get("row8.file_path")));
				if(isRemoved_tFileCopy_1.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_1 = String.format("tFileCopy_1 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_1);
						System.err.println(errorMessageCouldNotRemoveFile_tFileCopy_1 + "\n");
				} 

		}
		globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",desFile_tFileCopy_1.getPath()); 
		globalMap.put("tFileCopy_1_DESTINATION_FILENAME",desFile_tFileCopy_1.getName()); 

		globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
		globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());        
        

 


	tos_count_tFileCopy_1++;

/**
 * [tFileCopy_1 main ] stop
 */
	
	/**
	 * [tFileCopy_1 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 

ok_Hash.put("tFileCopy_1", true);
end_Hash.put("tFileCopy_1", System.currentTimeMillis());




/**
 * [tFileCopy_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate8", 2, "exec" + NB_ITERATE_tFileCopy_1);
						}				
					





} // End of branch "out5"







	
	/**
	 * [tIterateToFlow_3_AI end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_3";
	
	currentComponent="tIterateToFlow_3_AI";

	
	nb_line_tIterateToFlow_3_AI++;
}
globalMap.put("tIterateToFlow_3_AI_NB_LINE",nb_line_tIterateToFlow_3_AI);
 

ok_Hash.put("tIterateToFlow_3_AI", true);
end_Hash.put("tIterateToFlow_3_AI", System.currentTimeMillis());




/**
 * [tIterateToFlow_3_AI end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";

	

globalMap.put("tFlowToIterate_2_NB_LINE",nb_line_tFlowToIterate_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFlowToIterate_2", true);
end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());




/**
 * [tFlowToIterate_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
							//free memory for "tIterateToFlow_3_AI"
							globalMap.remove("tIterateToFlow_3");
						
				try{
					
	
	/**
	 * [tIterateToFlow_3_AI finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_3";
	
	currentComponent="tIterateToFlow_3_AI";

	

 



/**
 * [tIterateToFlow_3_AI finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";

	

 



/**
 * [tFlowToIterate_2 finally ] stop
 */

	
	/**
	 * [tFileCopy_1 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tIterateToFlow_3_AI_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final b_meetic b_meeticClass = new b_meetic();

        int exitCode = b_meeticClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = b_meetic.class.getClassLoader().getResourceAsStream("talend_social_network/b_meetic_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("path", "id_String");
				
                context.path=(String) context.getProperty("path");
				    context.setContextType("path_archive", "id_String");
				
                context.path_archive=(String) context.getProperty("path_archive");
				    context.setContextType("path_tmp", "id_String");
				
                context.path_tmp=(String) context.getProperty("path_tmp");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("path")) {
                context.path = (String) parentContextMap.get("path");
            }if (parentContextMap.containsKey("path_archive")) {
                context.path_archive = (String) parentContextMap.get("path_archive");
            }if (parentContextMap.containsKey("path_tmp")) {
                context.path_tmp = (String) parentContextMap.get("path_tmp");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : b_meetic");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tMysqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tMysqlConnection_1", globalMap.get("conn_tMysqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     454672 characters generated by Talend Open Studio for Data Integration 
 *     on the 2018年2月1日 下午09时50分05秒
 ************************************************************************************************/